// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	context "context"
	strconv "strconv"
	time "time"

	globalid "github.com/october93/engine/kit/globalid"
	model "github.com/october93/engine/model"
	protocol "github.com/october93/engine/rpc/protocol"
	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

// MakeExecutableSchema creates an ExecutableSchema from the Resolvers interface.
func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(resolvers ResolverRoot) graphql.ExecutableSchema {
	return MakeExecutableSchema(shortMapper{r: resolvers})
}

type Resolvers interface {
	Announcement_user(ctx context.Context, obj *model.Announcement) (*model.User, error)
	Announcement_card(ctx context.Context, obj *model.Announcement) (*model.Card, error)

	Card_apparentAuthor(ctx context.Context, obj *model.Card) (*model.Author, error)

	Channel_isPrivate(ctx context.Context, obj *model.Channel) (bool, error)

	FeatureSwitch_state(ctx context.Context, obj *model.FeatureSwitch) (FeatureState, error)
	FeatureSwitch_testingUsers(ctx context.Context, obj *model.FeatureSwitch) ([]globalid.ID, error)

	Invite_issuer(ctx context.Context, obj *model.Invite) (model.User, error)

	ModelTime_time(ctx context.Context, obj *model.DBTime) (*time.Time, error)
	Mutation_generateExampleFeed(ctx context.Context, limitToChannels []globalid.ID, limitToLastNHours *int) ([]globalid.ID, error)
	Mutation_previewUserFeed(ctx context.Context, userID globalid.ID) ([]globalid.ID, error)
	Mutation_getCardConfidenceData(ctx context.Context, userID globalid.ID) ([]model.ConfidenceData, error)
	Mutation_setUserDefaultStatus(ctx context.Context, id globalid.ID, status bool) (string, error)
	Mutation_shadowbanCards(ctx context.Context, ids []globalid.ID) (string, error)
	Mutation_unshadowbanCards(ctx context.Context, ids []globalid.ID) (string, error)
	Mutation_shadowbanUser(ctx context.Context, id globalid.ID) (string, error)
	Mutation_unshadowbanUser(ctx context.Context, id globalid.ID) (string, error)
	Mutation_recalculateLeaderboard(ctx context.Context, inviteReward *int) (string, error)
	Mutation_deactivateInvite(ctx context.Context, id globalid.ID) (string, error)
	Mutation_setCardIntroStatus(ctx context.Context, id globalid.ID, status bool) (string, error)
	Mutation_blockUser(ctx context.Context, id globalid.ID, deleteCards *bool) (string, error)
	Mutation_unblockUser(ctx context.Context, id globalid.ID) (string, error)
	Mutation_createAnnouncement(ctx context.Context, announcement AnnouncementInput, sendPush *bool) (*model.Announcement, error)
	Mutation_deleteAnnouncement(ctx context.Context, id globalid.ID) (string, error)
	Mutation_deleteFeatureSwitch(ctx context.Context, featureID globalid.ID) (string, error)
	Mutation_createFeatureSwitch(ctx context.Context, state *string, name string) (string, error)
	Mutation_setFeatureSwitchState(ctx context.Context, featureID globalid.ID, state string) (string, error)
	Mutation_createInvite(ctx context.Context, userID globalid.ID, usesAllowed *int) (*model.Invite, error)
	Mutation_createInvitesFromTokens(ctx context.Context, userID globalid.ID, tokens []string) ([]model.Invite, error)
	Mutation_createUser(ctx context.Context, user UserInput) (*model.User, error)
	Mutation_resetPasswords(ctx context.Context, usernames []string) (string, error)
	Mutation_toggleFeatureForUser(ctx context.Context, username string, featurename string) (string, error)
	Mutation_updateSettings(ctx context.Context, settings SettingsInput) (string, error)
	Mutation_updateWaitlist(ctx context.Context, comment string, email string) (string, error)
	Mutation_indexAllUsers(ctx context.Context, clearFirst *bool) (string, error)
	Mutation_indexAllChannels(ctx context.Context, clearFirst *bool) (string, error)
	Mutation_createChannel(ctx context.Context, channel ChannelInput) (*model.Channel, error)
	Mutation_updateChannel(ctx context.Context, id globalid.ID, channel ChannelInput) (*model.Channel, error)
	Mutation_createChannelInvite(ctx context.Context, channelID globalid.ID, inviterID globalid.ID) (*model.Invite, error)
	Mutation_updateCoinBalances(ctx context.Context, userID globalid.ID, coinBalance *int, temporaryCoinBalance *int) (string, error)
	Mutation_sendTestPush(ctx context.Context, userID globalid.ID, forCardID *globalid.ID, message string, typ string, action *string, actionData *string) (string, error)
	Query_cards(ctx context.Context, from *time.Time, to *time.Time, ids []globalid.ID, introCards *bool) ([]model.Card, error)
	Query_users(ctx context.Context, usernames []string) ([]model.User, error)
	Query_sessions(ctx context.Context) ([]model.Session, error)
	Query_settings(ctx context.Context) (*model.Settings, error)
	Query_invites(ctx context.Context) ([]model.Invite, error)
	Query_featureSwitches(ctx context.Context) ([]model.FeatureSwitch, error)
	Query_announcements(ctx context.Context) ([]model.Announcement, error)
	Query_waitlist(ctx context.Context) ([]model.WaitlistEntry, error)
	Query_connections(ctx context.Context) ([]protocol.Connection, error)
	Query_channels(ctx context.Context) ([]model.Channel, error)
	Query_channelEngagements(ctx context.Context) ([]model.ChannelEngagement, error)
	Query_cardEngagement(ctx context.Context, from *string, to *string) ([]CardEngagement, error)

	User_blocked(ctx context.Context, obj *model.User) (bool, error)
	User_shadowbanned(ctx context.Context, obj *model.User) (bool, error)

	User_lastActiveAt(ctx context.Context, obj *model.User) (*model.DBTime, error)
	User_joinedFromInvite(ctx context.Context, obj *model.User) (*model.Invite, error)
	User_coinBalance(ctx context.Context, obj *model.User) (int, error)
	User_temporaryCoinBalance(ctx context.Context, obj *model.User) (int, error)
	User_postCount(ctx context.Context, obj *model.User, from *time.Time, to *time.Time) (int, error)
	User_engagement(ctx context.Context, obj *model.User, from *string, to *string) (*model.UserEngagement, error)
}

type ResolverRoot interface {
	Announcement() AnnouncementResolver
	Card() CardResolver
	Channel() ChannelResolver
	FeatureSwitch() FeatureSwitchResolver
	Invite() InviteResolver
	ModelTime() ModelTimeResolver
	Mutation() MutationResolver
	Query() QueryResolver
	User() UserResolver
}
type AnnouncementResolver interface {
	User(ctx context.Context, obj *model.Announcement) (*model.User, error)
	Card(ctx context.Context, obj *model.Announcement) (*model.Card, error)
}
type CardResolver interface {
	ApparentAuthor(ctx context.Context, obj *model.Card) (*model.Author, error)
}
type ChannelResolver interface {
	IsPrivate(ctx context.Context, obj *model.Channel) (bool, error)
}
type FeatureSwitchResolver interface {
	State(ctx context.Context, obj *model.FeatureSwitch) (FeatureState, error)
	TestingUsers(ctx context.Context, obj *model.FeatureSwitch) ([]globalid.ID, error)
}
type InviteResolver interface {
	Issuer(ctx context.Context, obj *model.Invite) (model.User, error)
}
type ModelTimeResolver interface {
	Time(ctx context.Context, obj *model.DBTime) (*time.Time, error)
}
type MutationResolver interface {
	GenerateExampleFeed(ctx context.Context, limitToChannels []globalid.ID, limitToLastNHours *int) ([]globalid.ID, error)
	PreviewUserFeed(ctx context.Context, userID globalid.ID) ([]globalid.ID, error)
	GetCardConfidenceData(ctx context.Context, userID globalid.ID) ([]model.ConfidenceData, error)
	SetUserDefaultStatus(ctx context.Context, id globalid.ID, status bool) (string, error)
	ShadowbanCards(ctx context.Context, ids []globalid.ID) (string, error)
	UnshadowbanCards(ctx context.Context, ids []globalid.ID) (string, error)
	ShadowbanUser(ctx context.Context, id globalid.ID) (string, error)
	UnshadowbanUser(ctx context.Context, id globalid.ID) (string, error)
	RecalculateLeaderboard(ctx context.Context, inviteReward *int) (string, error)
	DeactivateInvite(ctx context.Context, id globalid.ID) (string, error)
	SetCardIntroStatus(ctx context.Context, id globalid.ID, status bool) (string, error)
	BlockUser(ctx context.Context, id globalid.ID, deleteCards *bool) (string, error)
	UnblockUser(ctx context.Context, id globalid.ID) (string, error)
	CreateAnnouncement(ctx context.Context, announcement AnnouncementInput, sendPush *bool) (*model.Announcement, error)
	DeleteAnnouncement(ctx context.Context, id globalid.ID) (string, error)
	DeleteFeatureSwitch(ctx context.Context, featureID globalid.ID) (string, error)
	CreateFeatureSwitch(ctx context.Context, state *string, name string) (string, error)
	SetFeatureSwitchState(ctx context.Context, featureID globalid.ID, state string) (string, error)
	CreateInvite(ctx context.Context, userID globalid.ID, usesAllowed *int) (*model.Invite, error)
	CreateInvitesFromTokens(ctx context.Context, userID globalid.ID, tokens []string) ([]model.Invite, error)
	CreateUser(ctx context.Context, user UserInput) (*model.User, error)
	ResetPasswords(ctx context.Context, usernames []string) (string, error)
	ToggleFeatureForUser(ctx context.Context, username string, featurename string) (string, error)
	UpdateSettings(ctx context.Context, settings SettingsInput) (string, error)
	UpdateWaitlist(ctx context.Context, comment string, email string) (string, error)
	IndexAllUsers(ctx context.Context, clearFirst *bool) (string, error)
	IndexAllChannels(ctx context.Context, clearFirst *bool) (string, error)
	CreateChannel(ctx context.Context, channel ChannelInput) (*model.Channel, error)
	UpdateChannel(ctx context.Context, id globalid.ID, channel ChannelInput) (*model.Channel, error)
	CreateChannelInvite(ctx context.Context, channelID globalid.ID, inviterID globalid.ID) (*model.Invite, error)
	UpdateCoinBalances(ctx context.Context, userID globalid.ID, coinBalance *int, temporaryCoinBalance *int) (string, error)
	SendTestPush(ctx context.Context, userID globalid.ID, forCardID *globalid.ID, message string, typ string, action *string, actionData *string) (string, error)
}
type QueryResolver interface {
	Cards(ctx context.Context, from *time.Time, to *time.Time, ids []globalid.ID, introCards *bool) ([]model.Card, error)
	Users(ctx context.Context, usernames []string) ([]model.User, error)
	Sessions(ctx context.Context) ([]model.Session, error)
	Settings(ctx context.Context) (*model.Settings, error)
	Invites(ctx context.Context) ([]model.Invite, error)
	FeatureSwitches(ctx context.Context) ([]model.FeatureSwitch, error)
	Announcements(ctx context.Context) ([]model.Announcement, error)
	Waitlist(ctx context.Context) ([]model.WaitlistEntry, error)
	Connections(ctx context.Context) ([]protocol.Connection, error)
	Channels(ctx context.Context) ([]model.Channel, error)
	ChannelEngagements(ctx context.Context) ([]model.ChannelEngagement, error)
	CardEngagement(ctx context.Context, from *string, to *string) ([]CardEngagement, error)
}
type UserResolver interface {
	Blocked(ctx context.Context, obj *model.User) (bool, error)
	Shadowbanned(ctx context.Context, obj *model.User) (bool, error)

	LastActiveAt(ctx context.Context, obj *model.User) (*model.DBTime, error)
	JoinedFromInvite(ctx context.Context, obj *model.User) (*model.Invite, error)
	CoinBalance(ctx context.Context, obj *model.User) (int, error)
	TemporaryCoinBalance(ctx context.Context, obj *model.User) (int, error)
	PostCount(ctx context.Context, obj *model.User, from *time.Time, to *time.Time) (int, error)
	Engagement(ctx context.Context, obj *model.User, from *string, to *string) (*model.UserEngagement, error)
}

type shortMapper struct {
	r ResolverRoot
}

func (s shortMapper) Announcement_user(ctx context.Context, obj *model.Announcement) (*model.User, error) {
	return s.r.Announcement().User(ctx, obj)
}

func (s shortMapper) Announcement_card(ctx context.Context, obj *model.Announcement) (*model.Card, error) {
	return s.r.Announcement().Card(ctx, obj)
}

func (s shortMapper) Card_apparentAuthor(ctx context.Context, obj *model.Card) (*model.Author, error) {
	return s.r.Card().ApparentAuthor(ctx, obj)
}

func (s shortMapper) Channel_isPrivate(ctx context.Context, obj *model.Channel) (bool, error) {
	return s.r.Channel().IsPrivate(ctx, obj)
}

func (s shortMapper) FeatureSwitch_state(ctx context.Context, obj *model.FeatureSwitch) (FeatureState, error) {
	return s.r.FeatureSwitch().State(ctx, obj)
}

func (s shortMapper) FeatureSwitch_testingUsers(ctx context.Context, obj *model.FeatureSwitch) ([]globalid.ID, error) {
	return s.r.FeatureSwitch().TestingUsers(ctx, obj)
}

func (s shortMapper) Invite_issuer(ctx context.Context, obj *model.Invite) (model.User, error) {
	return s.r.Invite().Issuer(ctx, obj)
}

func (s shortMapper) ModelTime_time(ctx context.Context, obj *model.DBTime) (*time.Time, error) {
	return s.r.ModelTime().Time(ctx, obj)
}

func (s shortMapper) Mutation_generateExampleFeed(ctx context.Context, limitToChannels []globalid.ID, limitToLastNHours *int) ([]globalid.ID, error) {
	return s.r.Mutation().GenerateExampleFeed(ctx, limitToChannels, limitToLastNHours)
}

func (s shortMapper) Mutation_previewUserFeed(ctx context.Context, userID globalid.ID) ([]globalid.ID, error) {
	return s.r.Mutation().PreviewUserFeed(ctx, userID)
}

func (s shortMapper) Mutation_getCardConfidenceData(ctx context.Context, userID globalid.ID) ([]model.ConfidenceData, error) {
	return s.r.Mutation().GetCardConfidenceData(ctx, userID)
}

func (s shortMapper) Mutation_setUserDefaultStatus(ctx context.Context, id globalid.ID, status bool) (string, error) {
	return s.r.Mutation().SetUserDefaultStatus(ctx, id, status)
}

func (s shortMapper) Mutation_shadowbanCards(ctx context.Context, ids []globalid.ID) (string, error) {
	return s.r.Mutation().ShadowbanCards(ctx, ids)
}

func (s shortMapper) Mutation_unshadowbanCards(ctx context.Context, ids []globalid.ID) (string, error) {
	return s.r.Mutation().UnshadowbanCards(ctx, ids)
}

func (s shortMapper) Mutation_shadowbanUser(ctx context.Context, id globalid.ID) (string, error) {
	return s.r.Mutation().ShadowbanUser(ctx, id)
}

func (s shortMapper) Mutation_unshadowbanUser(ctx context.Context, id globalid.ID) (string, error) {
	return s.r.Mutation().UnshadowbanUser(ctx, id)
}

func (s shortMapper) Mutation_recalculateLeaderboard(ctx context.Context, inviteReward *int) (string, error) {
	return s.r.Mutation().RecalculateLeaderboard(ctx, inviteReward)
}

func (s shortMapper) Mutation_deactivateInvite(ctx context.Context, id globalid.ID) (string, error) {
	return s.r.Mutation().DeactivateInvite(ctx, id)
}

func (s shortMapper) Mutation_setCardIntroStatus(ctx context.Context, id globalid.ID, status bool) (string, error) {
	return s.r.Mutation().SetCardIntroStatus(ctx, id, status)
}

func (s shortMapper) Mutation_blockUser(ctx context.Context, id globalid.ID, deleteCards *bool) (string, error) {
	return s.r.Mutation().BlockUser(ctx, id, deleteCards)
}

func (s shortMapper) Mutation_unblockUser(ctx context.Context, id globalid.ID) (string, error) {
	return s.r.Mutation().UnblockUser(ctx, id)
}

func (s shortMapper) Mutation_createAnnouncement(ctx context.Context, announcement AnnouncementInput, sendPush *bool) (*model.Announcement, error) {
	return s.r.Mutation().CreateAnnouncement(ctx, announcement, sendPush)
}

func (s shortMapper) Mutation_deleteAnnouncement(ctx context.Context, id globalid.ID) (string, error) {
	return s.r.Mutation().DeleteAnnouncement(ctx, id)
}

func (s shortMapper) Mutation_deleteFeatureSwitch(ctx context.Context, featureID globalid.ID) (string, error) {
	return s.r.Mutation().DeleteFeatureSwitch(ctx, featureID)
}

func (s shortMapper) Mutation_createFeatureSwitch(ctx context.Context, state *string, name string) (string, error) {
	return s.r.Mutation().CreateFeatureSwitch(ctx, state, name)
}

func (s shortMapper) Mutation_setFeatureSwitchState(ctx context.Context, featureID globalid.ID, state string) (string, error) {
	return s.r.Mutation().SetFeatureSwitchState(ctx, featureID, state)
}

func (s shortMapper) Mutation_createInvite(ctx context.Context, userID globalid.ID, usesAllowed *int) (*model.Invite, error) {
	return s.r.Mutation().CreateInvite(ctx, userID, usesAllowed)
}

func (s shortMapper) Mutation_createInvitesFromTokens(ctx context.Context, userID globalid.ID, tokens []string) ([]model.Invite, error) {
	return s.r.Mutation().CreateInvitesFromTokens(ctx, userID, tokens)
}

func (s shortMapper) Mutation_createUser(ctx context.Context, user UserInput) (*model.User, error) {
	return s.r.Mutation().CreateUser(ctx, user)
}

func (s shortMapper) Mutation_resetPasswords(ctx context.Context, usernames []string) (string, error) {
	return s.r.Mutation().ResetPasswords(ctx, usernames)
}

func (s shortMapper) Mutation_toggleFeatureForUser(ctx context.Context, username string, featurename string) (string, error) {
	return s.r.Mutation().ToggleFeatureForUser(ctx, username, featurename)
}

func (s shortMapper) Mutation_updateSettings(ctx context.Context, settings SettingsInput) (string, error) {
	return s.r.Mutation().UpdateSettings(ctx, settings)
}

func (s shortMapper) Mutation_updateWaitlist(ctx context.Context, comment string, email string) (string, error) {
	return s.r.Mutation().UpdateWaitlist(ctx, comment, email)
}

func (s shortMapper) Mutation_indexAllUsers(ctx context.Context, clearFirst *bool) (string, error) {
	return s.r.Mutation().IndexAllUsers(ctx, clearFirst)
}

func (s shortMapper) Mutation_indexAllChannels(ctx context.Context, clearFirst *bool) (string, error) {
	return s.r.Mutation().IndexAllChannels(ctx, clearFirst)
}

func (s shortMapper) Mutation_createChannel(ctx context.Context, channel ChannelInput) (*model.Channel, error) {
	return s.r.Mutation().CreateChannel(ctx, channel)
}

func (s shortMapper) Mutation_updateChannel(ctx context.Context, id globalid.ID, channel ChannelInput) (*model.Channel, error) {
	return s.r.Mutation().UpdateChannel(ctx, id, channel)
}

func (s shortMapper) Mutation_createChannelInvite(ctx context.Context, channelID globalid.ID, inviterID globalid.ID) (*model.Invite, error) {
	return s.r.Mutation().CreateChannelInvite(ctx, channelID, inviterID)
}

func (s shortMapper) Mutation_updateCoinBalances(ctx context.Context, userID globalid.ID, coinBalance *int, temporaryCoinBalance *int) (string, error) {
	return s.r.Mutation().UpdateCoinBalances(ctx, userID, coinBalance, temporaryCoinBalance)
}

func (s shortMapper) Mutation_sendTestPush(ctx context.Context, userID globalid.ID, forCardID *globalid.ID, message string, typ string, action *string, actionData *string) (string, error) {
	return s.r.Mutation().SendTestPush(ctx, userID, forCardID, message, typ, action, actionData)
}

func (s shortMapper) Query_cards(ctx context.Context, from *time.Time, to *time.Time, ids []globalid.ID, introCards *bool) ([]model.Card, error) {
	return s.r.Query().Cards(ctx, from, to, ids, introCards)
}

func (s shortMapper) Query_users(ctx context.Context, usernames []string) ([]model.User, error) {
	return s.r.Query().Users(ctx, usernames)
}

func (s shortMapper) Query_sessions(ctx context.Context) ([]model.Session, error) {
	return s.r.Query().Sessions(ctx)
}

func (s shortMapper) Query_settings(ctx context.Context) (*model.Settings, error) {
	return s.r.Query().Settings(ctx)
}

func (s shortMapper) Query_invites(ctx context.Context) ([]model.Invite, error) {
	return s.r.Query().Invites(ctx)
}

func (s shortMapper) Query_featureSwitches(ctx context.Context) ([]model.FeatureSwitch, error) {
	return s.r.Query().FeatureSwitches(ctx)
}

func (s shortMapper) Query_announcements(ctx context.Context) ([]model.Announcement, error) {
	return s.r.Query().Announcements(ctx)
}

func (s shortMapper) Query_waitlist(ctx context.Context) ([]model.WaitlistEntry, error) {
	return s.r.Query().Waitlist(ctx)
}

func (s shortMapper) Query_connections(ctx context.Context) ([]protocol.Connection, error) {
	return s.r.Query().Connections(ctx)
}

func (s shortMapper) Query_channels(ctx context.Context) ([]model.Channel, error) {
	return s.r.Query().Channels(ctx)
}

func (s shortMapper) Query_channelEngagements(ctx context.Context) ([]model.ChannelEngagement, error) {
	return s.r.Query().ChannelEngagements(ctx)
}

func (s shortMapper) Query_cardEngagement(ctx context.Context, from *string, to *string) ([]CardEngagement, error) {
	return s.r.Query().CardEngagement(ctx, from, to)
}

func (s shortMapper) User_blocked(ctx context.Context, obj *model.User) (bool, error) {
	return s.r.User().Blocked(ctx, obj)
}

func (s shortMapper) User_shadowbanned(ctx context.Context, obj *model.User) (bool, error) {
	return s.r.User().Shadowbanned(ctx, obj)
}

func (s shortMapper) User_lastActiveAt(ctx context.Context, obj *model.User) (*model.DBTime, error) {
	return s.r.User().LastActiveAt(ctx, obj)
}

func (s shortMapper) User_joinedFromInvite(ctx context.Context, obj *model.User) (*model.Invite, error) {
	return s.r.User().JoinedFromInvite(ctx, obj)
}

func (s shortMapper) User_coinBalance(ctx context.Context, obj *model.User) (int, error) {
	return s.r.User().CoinBalance(ctx, obj)
}

func (s shortMapper) User_temporaryCoinBalance(ctx context.Context, obj *model.User) (int, error) {
	return s.r.User().TemporaryCoinBalance(ctx, obj)
}

func (s shortMapper) User_postCount(ctx context.Context, obj *model.User, from *time.Time, to *time.Time) (int, error) {
	return s.r.User().PostCount(ctx, obj, from, to)
}

func (s shortMapper) User_engagement(ctx context.Context, obj *model.User, from *string, to *string) (*model.UserEngagement, error) {
	return s.r.User().Engagement(ctx, obj, from, to)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var announcementImplementors = []string{"Announcement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Announcement(ctx context.Context, sel []query.Selection, obj *model.Announcement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, announcementImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Announcement")
		case "id":
			out.Values[i] = ec._Announcement_id(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Announcement_user(ctx, field, obj)
		case "card":
			out.Values[i] = ec._Announcement_card(ctx, field, obj)
		case "message":
			out.Values[i] = ec._Announcement_message(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Announcement_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Announcement_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Announcement_id(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Announcement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Announcement_user(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Announcement",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Announcement_user(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.User)
		if res == nil {
			return graphql.Null
		}
		return ec._User(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Announcement_card(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Announcement",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Announcement_card(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Card)
		if res == nil {
			return graphql.Null
		}
		return ec._Card(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Announcement_message(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Announcement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Message
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Announcement_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Announcement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Announcement_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Announcement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Announcement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UpdatedAt
	return graphql.MarshalTime(res)
}

var authorImplementors = []string{"Author"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Author(ctx context.Context, sel []query.Selection, obj *model.Author) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, authorImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Author")
		case "id":
			out.Values[i] = ec._Author_id(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._Author_displayName(ctx, field, obj)
		case "username":
			out.Values[i] = ec._Author_username(ctx, field, obj)
		case "profileImagePath":
			out.Values[i] = ec._Author_profileImagePath(ctx, field, obj)
		case "isAnonymous":
			out.Values[i] = ec._Author_isAnonymous(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Author_id(ctx context.Context, field graphql.CollectedField, obj *model.Author) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Author"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Author_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Author) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Author"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Author_username(ctx context.Context, field graphql.CollectedField, obj *model.Author) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Author"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Username
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Author_profileImagePath(ctx context.Context, field graphql.CollectedField, obj *model.Author) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Author"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProfileImagePath
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Author_isAnonymous(ctx context.Context, field graphql.CollectedField, obj *model.Author) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Author"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsAnonymous
	return graphql.MarshalBoolean(res)
}

var cardImplementors = []string{"Card"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Card(ctx context.Context, sel []query.Selection, obj *model.Card) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, cardImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Card")
		case "id":
			out.Values[i] = ec._Card_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Card_title(ctx, field, obj)
		case "content":
			out.Values[i] = ec._Card_content(ctx, field, obj)
		case "URL":
			out.Values[i] = ec._Card_URL(ctx, field, obj)
		case "BackgroundColor":
			out.Values[i] = ec._Card_BackgroundColor(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Card_createdAt(ctx, field, obj)
		case "ownerID":
			out.Values[i] = ec._Card_ownerID(ctx, field, obj)
		case "apparentAuthor":
			out.Values[i] = ec._Card_apparentAuthor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Card_id(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Card_title(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Title
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Card_content(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Content
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Card_URL(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.URL
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Card_BackgroundColor(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.BackgroundColor
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Card_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Card_ownerID(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Card"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OwnerID
	return res
}

func (ec *executionContext) _Card_apparentAuthor(ctx context.Context, field graphql.CollectedField, obj *model.Card) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Card",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Card_apparentAuthor(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Author)
		if res == nil {
			return graphql.Null
		}
		return ec._Author(ctx, field.Selections, res)
	})
}

var cardEngagementImplementors = []string{"CardEngagement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CardEngagement(ctx context.Context, sel []query.Selection, obj *CardEngagement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, cardEngagementImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CardEngagement")
		case "id":
			out.Values[i] = ec._CardEngagement_id(ctx, field, obj)
		case "uniqueUserCommentCount":
			out.Values[i] = ec._CardEngagement_uniqueUserCommentCount(ctx, field, obj)
		case "totalLikeCount":
			out.Values[i] = ec._CardEngagement_totalLikeCount(ctx, field, obj)
		case "totalDislikeCount":
			out.Values[i] = ec._CardEngagement_totalDislikeCount(ctx, field, obj)
		case "totalReplyCount":
			out.Values[i] = ec._CardEngagement_totalReplyCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _CardEngagement_id(ctx context.Context, field graphql.CollectedField, obj *CardEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CardEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _CardEngagement_uniqueUserCommentCount(ctx context.Context, field graphql.CollectedField, obj *CardEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CardEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UniqueUserCommentCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _CardEngagement_totalLikeCount(ctx context.Context, field graphql.CollectedField, obj *CardEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CardEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalLikeCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _CardEngagement_totalDislikeCount(ctx context.Context, field graphql.CollectedField, obj *CardEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CardEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalDislikeCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _CardEngagement_totalReplyCount(ctx context.Context, field graphql.CollectedField, obj *CardEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "CardEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalReplyCount
	return graphql.MarshalInt(res)
}

var channelImplementors = []string{"Channel"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Channel(ctx context.Context, sel []query.Selection, obj *model.Channel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, channelImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Channel")
		case "id":
			out.Values[i] = ec._Channel_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Channel_name(ctx, field, obj)
		case "handle":
			out.Values[i] = ec._Channel_handle(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._Channel_isDefault(ctx, field, obj)
		case "isPrivate":
			out.Values[i] = ec._Channel_isPrivate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Channel_id(ctx context.Context, field graphql.CollectedField, obj *model.Channel) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Channel"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Channel_name(ctx context.Context, field graphql.CollectedField, obj *model.Channel) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Channel"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Channel_handle(ctx context.Context, field graphql.CollectedField, obj *model.Channel) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Channel"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Handle
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Channel_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.Channel) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Channel"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDefault
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Channel_isPrivate(ctx context.Context, field graphql.CollectedField, obj *model.Channel) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Channel",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Channel_isPrivate(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		return graphql.MarshalBoolean(res)
	})
}

var channelEngagementImplementors = []string{"ChannelEngagement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ChannelEngagement(ctx context.Context, sel []query.Selection, obj *model.ChannelEngagement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, channelEngagementImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelEngagement")
		case "channelID":
			out.Values[i] = ec._ChannelEngagement_channelID(ctx, field, obj)
		case "totalPosts":
			out.Values[i] = ec._ChannelEngagement_totalPosts(ctx, field, obj)
		case "totalLikes":
			out.Values[i] = ec._ChannelEngagement_totalLikes(ctx, field, obj)
		case "totalDislikes":
			out.Values[i] = ec._ChannelEngagement_totalDislikes(ctx, field, obj)
		case "totalComments":
			out.Values[i] = ec._ChannelEngagement_totalComments(ctx, field, obj)
		case "totalCommenters":
			out.Values[i] = ec._ChannelEngagement_totalCommenters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ChannelEngagement_channelID(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ChannelID
	return res
}

func (ec *executionContext) _ChannelEngagement_totalPosts(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalPosts
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ChannelEngagement_totalLikes(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalLikes
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ChannelEngagement_totalDislikes(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalDislikes
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ChannelEngagement_totalComments(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalComments
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _ChannelEngagement_totalCommenters(ctx context.Context, field graphql.CollectedField, obj *model.ChannelEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ChannelEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.TotalCommenters
	return graphql.MarshalInt(res)
}

var confidenceDataImplementors = []string{"ConfidenceData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ConfidenceData(ctx context.Context, sel []query.Selection, obj *model.ConfidenceData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, confidenceDataImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfidenceData")
		case "id":
			out.Values[i] = ec._ConfidenceData_id(ctx, field, obj)
		case "upvoteCount":
			out.Values[i] = ec._ConfidenceData_upvoteCount(ctx, field, obj)
		case "downvoteCount":
			out.Values[i] = ec._ConfidenceData_downvoteCount(ctx, field, obj)
		case "commentCount":
			out.Values[i] = ec._ConfidenceData_commentCount(ctx, field, obj)
		case "viewCount":
			out.Values[i] = ec._ConfidenceData_viewCount(ctx, field, obj)
		case "goodness":
			out.Values[i] = ec._ConfidenceData_goodness(ctx, field, obj)
		case "engagementScore":
			out.Values[i] = ec._ConfidenceData_engagementScore(ctx, field, obj)
		case "confidence":
			out.Values[i] = ec._ConfidenceData_confidence(ctx, field, obj)
		case "probabilitySurfaced":
			out.Values[i] = ec._ConfidenceData_probabilitySurfaced(ctx, field, obj)
		case "rank":
			out.Values[i] = ec._ConfidenceData_rank(ctx, field, obj)
		case "scoreMod":
			out.Values[i] = ec._ConfidenceData_scoreMod(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ConfidenceData_id(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _ConfidenceData_upvoteCount(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UpvoteCount
	return MarshalInt64Scalar(res)
}

func (ec *executionContext) _ConfidenceData_downvoteCount(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DownvoteCount
	return MarshalInt64Scalar(res)
}

func (ec *executionContext) _ConfidenceData_commentCount(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CommentCount
	return MarshalInt64Scalar(res)
}

func (ec *executionContext) _ConfidenceData_viewCount(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ViewCount
	return MarshalInt64Scalar(res)
}

func (ec *executionContext) _ConfidenceData_goodness(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Goodness
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _ConfidenceData_engagementScore(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EngagementScore
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _ConfidenceData_confidence(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Confidence
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _ConfidenceData_probabilitySurfaced(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProbabilitySurfaced
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _ConfidenceData_rank(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Rank
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _ConfidenceData_scoreMod(ctx context.Context, field graphql.CollectedField, obj *model.ConfidenceData) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ConfidenceData"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ScoreMod
	return graphql.MarshalFloat(res)
}

var connectionImplementors = []string{"Connection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Connection(ctx context.Context, sel []query.Selection, obj *protocol.Connection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, connectionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Connection")
		case "userAgent":
			out.Values[i] = ec._Connection_userAgent(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._Connection_ipAddress(ctx, field, obj)
		case "adminPanel":
			out.Values[i] = ec._Connection_adminPanel(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Connection_createdAt(ctx, field, obj)
		case "session":
			out.Values[i] = ec._Connection_session(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Connection_userAgent(ctx context.Context, field graphql.CollectedField, obj *protocol.Connection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Connection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UserAgent
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Connection_ipAddress(ctx context.Context, field graphql.CollectedField, obj *protocol.Connection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Connection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IPAddress
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Connection_adminPanel(ctx context.Context, field graphql.CollectedField, obj *protocol.Connection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Connection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AdminPanel
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Connection_createdAt(ctx context.Context, field graphql.CollectedField, obj *protocol.Connection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Connection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Connection_session(ctx context.Context, field graphql.CollectedField, obj *protocol.Connection) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Connection"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Session
	if res == nil {
		return graphql.Null
	}
	return ec._Session(ctx, field.Selections, res)
}

var featureSwitchImplementors = []string{"FeatureSwitch"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FeatureSwitch(ctx context.Context, sel []query.Selection, obj *model.FeatureSwitch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, featureSwitchImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FeatureSwitch")
		case "id":
			out.Values[i] = ec._FeatureSwitch_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._FeatureSwitch_name(ctx, field, obj)
		case "state":
			out.Values[i] = ec._FeatureSwitch_state(ctx, field, obj)
		case "testingUsers":
			out.Values[i] = ec._FeatureSwitch_testingUsers(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._FeatureSwitch_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._FeatureSwitch_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FeatureSwitch_id(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FeatureSwitch"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _FeatureSwitch_name(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FeatureSwitch"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _FeatureSwitch_state(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "FeatureSwitch",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.FeatureSwitch_state(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(FeatureState)
		return res
	})
}

func (ec *executionContext) _FeatureSwitch_testingUsers(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "FeatureSwitch",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.FeatureSwitch_testingUsers(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]globalid.ID)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return res[idx1]
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _FeatureSwitch_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FeatureSwitch"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _FeatureSwitch_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.FeatureSwitch) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FeatureSwitch"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UpdatedAt
	return graphql.MarshalTime(res)
}

var inviteImplementors = []string{"Invite"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Invite(ctx context.Context, sel []query.Selection, obj *model.Invite) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, inviteImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invite")
		case "id":
			out.Values[i] = ec._Invite_id(ctx, field, obj)
		case "token":
			out.Values[i] = ec._Invite_token(ctx, field, obj)
		case "groupID":
			out.Values[i] = ec._Invite_groupID(ctx, field, obj)
		case "hideFromUser":
			out.Values[i] = ec._Invite_hideFromUser(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Invite_createdAt(ctx, field, obj)
		case "issuer":
			out.Values[i] = ec._Invite_issuer(ctx, field, obj)
		case "remainingUses":
			out.Values[i] = ec._Invite_remainingUses(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Invite_id(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Invite_token(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Token
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Invite_groupID(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.GroupID
	return res
}

func (ec *executionContext) _Invite_hideFromUser(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.HideFromUser
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Invite_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Invite_issuer(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Invite",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Invite_issuer(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(model.User)
		return ec._User(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Invite_remainingUses(ctx context.Context, field graphql.CollectedField, obj *model.Invite) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Invite"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RemainingUses
	return graphql.MarshalInt(res)
}

var modelTimeImplementors = []string{"ModelTime"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ModelTime(ctx context.Context, sel []query.Selection, obj *model.DBTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, modelTimeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModelTime")
		case "time":
			out.Values[i] = ec._ModelTime_time(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ModelTime_time(ctx context.Context, field graphql.CollectedField, obj *model.DBTime) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "ModelTime",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.ModelTime_time(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*time.Time)
		if res == nil {
			return graphql.Null
		}
		return graphql.MarshalTime(*res)
	})
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, mutationImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "generateExampleFeed":
			out.Values[i] = ec._Mutation_generateExampleFeed(ctx, field)
		case "previewUserFeed":
			out.Values[i] = ec._Mutation_previewUserFeed(ctx, field)
		case "getCardConfidenceData":
			out.Values[i] = ec._Mutation_getCardConfidenceData(ctx, field)
		case "setUserDefaultStatus":
			out.Values[i] = ec._Mutation_setUserDefaultStatus(ctx, field)
		case "shadowbanCards":
			out.Values[i] = ec._Mutation_shadowbanCards(ctx, field)
		case "unshadowbanCards":
			out.Values[i] = ec._Mutation_unshadowbanCards(ctx, field)
		case "shadowbanUser":
			out.Values[i] = ec._Mutation_shadowbanUser(ctx, field)
		case "unshadowbanUser":
			out.Values[i] = ec._Mutation_unshadowbanUser(ctx, field)
		case "recalculateLeaderboard":
			out.Values[i] = ec._Mutation_recalculateLeaderboard(ctx, field)
		case "deactivateInvite":
			out.Values[i] = ec._Mutation_deactivateInvite(ctx, field)
		case "setCardIntroStatus":
			out.Values[i] = ec._Mutation_setCardIntroStatus(ctx, field)
		case "blockUser":
			out.Values[i] = ec._Mutation_blockUser(ctx, field)
		case "unblockUser":
			out.Values[i] = ec._Mutation_unblockUser(ctx, field)
		case "createAnnouncement":
			out.Values[i] = ec._Mutation_createAnnouncement(ctx, field)
		case "deleteAnnouncement":
			out.Values[i] = ec._Mutation_deleteAnnouncement(ctx, field)
		case "deleteFeatureSwitch":
			out.Values[i] = ec._Mutation_deleteFeatureSwitch(ctx, field)
		case "createFeatureSwitch":
			out.Values[i] = ec._Mutation_createFeatureSwitch(ctx, field)
		case "setFeatureSwitchState":
			out.Values[i] = ec._Mutation_setFeatureSwitchState(ctx, field)
		case "createInvite":
			out.Values[i] = ec._Mutation_createInvite(ctx, field)
		case "createInvitesFromTokens":
			out.Values[i] = ec._Mutation_createInvitesFromTokens(ctx, field)
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
		case "resetPasswords":
			out.Values[i] = ec._Mutation_resetPasswords(ctx, field)
		case "toggleFeatureForUser":
			out.Values[i] = ec._Mutation_toggleFeatureForUser(ctx, field)
		case "updateSettings":
			out.Values[i] = ec._Mutation_updateSettings(ctx, field)
		case "updateWaitlist":
			out.Values[i] = ec._Mutation_updateWaitlist(ctx, field)
		case "indexAllUsers":
			out.Values[i] = ec._Mutation_indexAllUsers(ctx, field)
		case "indexAllChannels":
			out.Values[i] = ec._Mutation_indexAllChannels(ctx, field)
		case "createChannel":
			out.Values[i] = ec._Mutation_createChannel(ctx, field)
		case "updateChannel":
			out.Values[i] = ec._Mutation_updateChannel(ctx, field)
		case "createChannelInvite":
			out.Values[i] = ec._Mutation_createChannelInvite(ctx, field)
		case "updateCoinBalances":
			out.Values[i] = ec._Mutation_updateCoinBalances(ctx, field)
		case "sendTestPush":
			out.Values[i] = ec._Mutation_sendTestPush(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_generateExampleFeed(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []globalid.ID
	if tmp, ok := field.Args["limitToChannels"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]globalid.ID, len(rawIf1))
		for idx1 := range rawIf1 {
			err = (&arg0[idx1]).UnmarshalGQL(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limitToChannels"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["limitToLastNHours"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["limitToLastNHours"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_generateExampleFeed(ctx, args["limitToChannels"].([]globalid.ID), args["limitToLastNHours"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]globalid.ID)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return res[idx1]
		}())
	}
	return arr1
}

func (ec *executionContext) _Mutation_previewUserFeed(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_previewUserFeed(ctx, args["userID"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]globalid.ID)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return res[idx1]
		}())
	}
	return arr1
}

func (ec *executionContext) _Mutation_getCardConfidenceData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_getCardConfidenceData(ctx, args["userID"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.ConfidenceData)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._ConfidenceData(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Mutation_setUserDefaultStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := field.Args["status"]; ok {
		var err error
		arg1, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_setUserDefaultStatus(ctx, args["id"].(globalid.ID), args["status"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_shadowbanCards(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []globalid.ID
	if tmp, ok := field.Args["ids"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]globalid.ID, len(rawIf1))
		for idx1 := range rawIf1 {
			err = (&arg0[idx1]).UnmarshalGQL(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["ids"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_shadowbanCards(ctx, args["ids"].([]globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_unshadowbanCards(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []globalid.ID
	if tmp, ok := field.Args["ids"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]globalid.ID, len(rawIf1))
		for idx1 := range rawIf1 {
			err = (&arg0[idx1]).UnmarshalGQL(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["ids"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_unshadowbanCards(ctx, args["ids"].([]globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_shadowbanUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_shadowbanUser(ctx, args["id"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_unshadowbanUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_unshadowbanUser(ctx, args["id"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_recalculateLeaderboard(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := field.Args["inviteReward"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["inviteReward"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_recalculateLeaderboard(ctx, args["inviteReward"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_deactivateInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deactivateInvite(ctx, args["id"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_setCardIntroStatus(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := field.Args["status"]; ok {
		var err error
		arg1, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["status"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_setCardIntroStatus(ctx, args["id"].(globalid.ID), args["status"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_blockUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 *bool
	if tmp, ok := field.Args["deleteCards"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["deleteCards"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_blockUser(ctx, args["id"].(globalid.ID), args["deleteCards"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_unblockUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_unblockUser(ctx, args["id"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_createAnnouncement(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 AnnouncementInput
	if tmp, ok := field.Args["announcement"]; ok {
		var err error
		arg0, err = UnmarshalAnnouncementInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["announcement"] = arg0
	var arg1 *bool
	if tmp, ok := field.Args["sendPush"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["sendPush"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createAnnouncement(ctx, args["announcement"].(AnnouncementInput), args["sendPush"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Announcement)
	if res == nil {
		return graphql.Null
	}
	return ec._Announcement(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAnnouncement(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteAnnouncement(ctx, args["id"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_deleteFeatureSwitch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["featureID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["featureID"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_deleteFeatureSwitch(ctx, args["featureID"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_createFeatureSwitch(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["state"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["state"] = arg0
	var arg1 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createFeatureSwitch(ctx, args["state"].(*string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_setFeatureSwitchState(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["featureID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["featureID"] = arg0
	var arg1 string
	if tmp, ok := field.Args["state"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["state"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_setFeatureSwitchState(ctx, args["featureID"].(globalid.ID), args["state"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_createInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["usesAllowed"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["usesAllowed"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createInvite(ctx, args["userID"].(globalid.ID), args["usesAllowed"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Invite)
	if res == nil {
		return graphql.Null
	}
	return ec._Invite(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createInvitesFromTokens(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	var arg1 []string
	if tmp, ok := field.Args["tokens"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg1 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg1[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["tokens"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createInvitesFromTokens(ctx, args["userID"].(globalid.ID), args["tokens"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Invite)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Invite(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 UserInput
	if tmp, ok := field.Args["user"]; ok {
		var err error
		arg0, err = UnmarshalUserInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["user"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createUser(ctx, args["user"].(UserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	if res == nil {
		return graphql.Null
	}
	return ec._User(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resetPasswords(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := field.Args["usernames"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg0[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["usernames"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_resetPasswords(ctx, args["usernames"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_toggleFeatureForUser(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["username"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["username"] = arg0
	var arg1 string
	if tmp, ok := field.Args["featurename"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["featurename"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_toggleFeatureForUser(ctx, args["username"].(string), args["featurename"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_updateSettings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 SettingsInput
	if tmp, ok := field.Args["settings"]; ok {
		var err error
		arg0, err = UnmarshalSettingsInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["settings"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateSettings(ctx, args["settings"].(SettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_updateWaitlist(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["comment"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["comment"] = arg0
	var arg1 string
	if tmp, ok := field.Args["email"]; ok {
		var err error
		arg1, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["email"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateWaitlist(ctx, args["comment"].(string), args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_indexAllUsers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := field.Args["clearFirst"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["clearFirst"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_indexAllUsers(ctx, args["clearFirst"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_indexAllChannels(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := field.Args["clearFirst"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["clearFirst"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_indexAllChannels(ctx, args["clearFirst"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_createChannel(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 ChannelInput
	if tmp, ok := field.Args["channel"]; ok {
		var err error
		arg0, err = UnmarshalChannelInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["channel"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createChannel(ctx, args["channel"].(ChannelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	if res == nil {
		return graphql.Null
	}
	return ec._Channel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateChannel(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["id"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["id"] = arg0
	var arg1 ChannelInput
	if tmp, ok := field.Args["channel"]; ok {
		var err error
		arg1, err = UnmarshalChannelInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["channel"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateChannel(ctx, args["id"].(globalid.ID), args["channel"].(ChannelInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Channel)
	if res == nil {
		return graphql.Null
	}
	return ec._Channel(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createChannelInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["channelID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["channelID"] = arg0
	var arg1 globalid.ID
	if tmp, ok := field.Args["inviterID"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["inviterID"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_createChannelInvite(ctx, args["channelID"].(globalid.ID), args["inviterID"].(globalid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Invite)
	if res == nil {
		return graphql.Null
	}
	return ec._Invite(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCoinBalances(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	var arg1 *int
	if tmp, ok := field.Args["coinBalance"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["coinBalance"] = arg1
	var arg2 *int
	if tmp, ok := field.Args["temporaryCoinBalance"]; ok {
		var err error
		var ptr1 int
		if tmp != nil {
			ptr1, err = graphql.UnmarshalInt(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["temporaryCoinBalance"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_updateCoinBalances(ctx, args["userID"].(globalid.ID), args["coinBalance"].(*int), args["temporaryCoinBalance"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Mutation_sendTestPush(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 globalid.ID
	if tmp, ok := field.Args["userID"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["userID"] = arg0
	var arg1 *globalid.ID
	if tmp, ok := field.Args["forCardID"]; ok {
		var err error
		var ptr1 globalid.ID
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["forCardID"] = arg1
	var arg2 string
	if tmp, ok := field.Args["message"]; ok {
		var err error
		arg2, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["message"] = arg2
	var arg3 string
	if tmp, ok := field.Args["typ"]; ok {
		var err error
		arg3, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["typ"] = arg3
	var arg4 *string
	if tmp, ok := field.Args["action"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["action"] = arg4
	var arg5 *string
	if tmp, ok := field.Args["actionData"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["actionData"] = arg5
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()

	resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation_sendTestPush(ctx, args["userID"].(globalid.ID), args["forCardID"].(*globalid.ID), args["message"].(string), args["typ"].(string), args["action"].(*string), args["actionData"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "cards":
			out.Values[i] = ec._Query_cards(ctx, field)
		case "users":
			out.Values[i] = ec._Query_users(ctx, field)
		case "sessions":
			out.Values[i] = ec._Query_sessions(ctx, field)
		case "settings":
			out.Values[i] = ec._Query_settings(ctx, field)
		case "invites":
			out.Values[i] = ec._Query_invites(ctx, field)
		case "featureSwitches":
			out.Values[i] = ec._Query_featureSwitches(ctx, field)
		case "announcements":
			out.Values[i] = ec._Query_announcements(ctx, field)
		case "waitlist":
			out.Values[i] = ec._Query_waitlist(ctx, field)
		case "connections":
			out.Values[i] = ec._Query_connections(ctx, field)
		case "channels":
			out.Values[i] = ec._Query_channels(ctx, field)
		case "channelEngagements":
			out.Values[i] = ec._Query_channelEngagements(ctx, field)
		case "cardEngagement":
			out.Values[i] = ec._Query_cardEngagement(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_cards(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *time.Time
	if tmp, ok := field.Args["from"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = graphql.UnmarshalTime(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["from"] = arg0
	var arg1 *time.Time
	if tmp, ok := field.Args["to"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = graphql.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["to"] = arg1
	var arg2 []globalid.ID
	if tmp, ok := field.Args["ids"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg2 = make([]globalid.ID, len(rawIf1))
		for idx1 := range rawIf1 {
			err = (&arg2[idx1]).UnmarshalGQL(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["ids"] = arg2
	var arg3 *bool
	if tmp, ok := field.Args["introCards"]; ok {
		var err error
		var ptr1 bool
		if tmp != nil {
			ptr1, err = graphql.UnmarshalBoolean(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["introCards"] = arg3
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_cards(ctx, args["from"].(*time.Time), args["to"].(*time.Time), args["ids"].([]globalid.ID), args["introCards"].(*bool))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Card)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Card(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := field.Args["usernames"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			}
		}
		arg0 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg0[idx1], err = graphql.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["usernames"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_users(ctx, args["usernames"].([]string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.User)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._User(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_sessions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_sessions(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Session)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Session(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_settings(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_settings(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Settings)
		if res == nil {
			return graphql.Null
		}
		return ec._Settings(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_invites(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_invites(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Invite)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Invite(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_featureSwitches(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_featureSwitches(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.FeatureSwitch)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._FeatureSwitch(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_announcements(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_announcements(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Announcement)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Announcement(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_waitlist(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_waitlist(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.WaitlistEntry)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._WaitlistEntry(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_connections(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_connections(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]protocol.Connection)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Connection(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_channels(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_channels(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.Channel)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Channel(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_channelEngagements(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_channelEngagements(ctx)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]model.ChannelEngagement)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._ChannelEngagement(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_cardEngagement(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["from"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["from"] = arg0
	var arg1 *string
	if tmp, ok := field.Args["to"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["to"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_cardEngagement(ctx, args["from"].(*string), args["to"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]CardEngagement)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._CardEngagement(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var sessionImplementors = []string{"Session"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Session(ctx context.Context, sel []query.Selection, obj *model.Session) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, sessionImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Session")
		case "id":
			out.Values[i] = ec._Session_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Session_createdAt(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Session_user(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Session_id(ctx context.Context, field graphql.CollectedField, obj *model.Session) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Session"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _Session_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Session) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Session"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Session_user(ctx context.Context, field graphql.CollectedField, obj *model.Session) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Session"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.User
	if res == nil {
		return graphql.Null
	}
	return ec._User(ctx, field.Selections, res)
}

var setParameterPayloadImplementors = []string{"SetParameterPayload"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _SetParameterPayload(ctx context.Context, sel []query.Selection, obj *SetParameterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, setParameterPayloadImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetParameterPayload")
		case "changed":
			out.Values[i] = ec._SetParameterPayload_changed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _SetParameterPayload_changed(ctx context.Context, field graphql.CollectedField, obj *SetParameterPayload) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SetParameterPayload"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Changed
	return graphql.MarshalBoolean(res)
}

var settingsImplementors = []string{"Settings"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Settings(ctx context.Context, sel []query.Selection, obj *model.Settings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, settingsImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Settings")
		case "signupsFrozen":
			out.Values[i] = ec._Settings_signupsFrozen(ctx, field, obj)
		case "maintenanceMode":
			out.Values[i] = ec._Settings_maintenanceMode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Settings_signupsFrozen(ctx context.Context, field graphql.CollectedField, obj *model.Settings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Settings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SignupsFrozen
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Settings_maintenanceMode(ctx context.Context, field graphql.CollectedField, obj *model.Settings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Settings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MaintenanceMode
	return graphql.MarshalBoolean(res)
}

var userImplementors = []string{"User"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _User(ctx context.Context, sel []query.Selection, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, userImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
		case "username":
			out.Values[i] = ec._User_username(ctx, field, obj)
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._User_displayName(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._User_isDefault(ctx, field, obj)
		case "profileImagePath":
			out.Values[i] = ec._User_profileImagePath(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
		case "blocked":
			out.Values[i] = ec._User_blocked(ctx, field, obj)
		case "shadowbanned":
			out.Values[i] = ec._User_shadowbanned(ctx, field, obj)
		case "possibleUninstall":
			out.Values[i] = ec._User_possibleUninstall(ctx, field, obj)
		case "lastActiveAt":
			out.Values[i] = ec._User_lastActiveAt(ctx, field, obj)
		case "joinedFromInvite":
			out.Values[i] = ec._User_joinedFromInvite(ctx, field, obj)
		case "coinBalance":
			out.Values[i] = ec._User_coinBalance(ctx, field, obj)
		case "temporaryCoinBalance":
			out.Values[i] = ec._User_temporaryCoinBalance(ctx, field, obj)
		case "postCount":
			out.Values[i] = ec._User_postCount(ctx, field, obj)
		case "engagement":
			out.Values[i] = ec._User_engagement(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Username
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Email
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_displayName(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DisplayName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDefault
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _User_profileImagePath(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProfileImagePath
	return graphql.MarshalString(res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.UpdatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _User_blocked(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_blocked(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		return graphql.MarshalBoolean(res)
	})
}

func (ec *executionContext) _User_shadowbanned(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_shadowbanned(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(bool)
		return graphql.MarshalBoolean(res)
	})
}

func (ec *executionContext) _User_possibleUninstall(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "User"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleUninstall
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _User_lastActiveAt(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_lastActiveAt(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.DBTime)
		if res == nil {
			return graphql.Null
		}
		return ec._ModelTime(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _User_joinedFromInvite(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_joinedFromInvite(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.Invite)
		if res == nil {
			return graphql.Null
		}
		return ec._Invite(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _User_coinBalance(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_coinBalance(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _User_temporaryCoinBalance(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   nil,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_temporaryCoinBalance(ctx, obj)
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _User_postCount(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *time.Time
	if tmp, ok := field.Args["from"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = graphql.UnmarshalTime(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["from"] = arg0
	var arg1 *time.Time
	if tmp, ok := field.Args["to"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = graphql.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["to"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_postCount(ctx, obj, args["from"].(*time.Time), args["to"].(*time.Time))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(int)
		return graphql.MarshalInt(res)
	})
}

func (ec *executionContext) _User_engagement(ctx context.Context, field graphql.CollectedField, obj *model.User) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["from"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["from"] = arg0
	var arg1 *string
	if tmp, ok := field.Args["to"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["to"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "User",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.User_engagement(ctx, obj, args["from"].(*string), args["to"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*model.UserEngagement)
		if res == nil {
			return graphql.Null
		}
		return ec._UserEngagement(ctx, field.Selections, res)
	})
}

var userEngagementImplementors = []string{"UserEngagement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UserEngagement(ctx context.Context, sel []query.Selection, obj *model.UserEngagement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, userEngagementImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEngagement")
		case "daysActive":
			out.Values[i] = ec._UserEngagement_daysActive(ctx, field, obj)
		case "postCount":
			out.Values[i] = ec._UserEngagement_postCount(ctx, field, obj)
		case "commentCount":
			out.Values[i] = ec._UserEngagement_commentCount(ctx, field, obj)
		case "reactedCount":
			out.Values[i] = ec._UserEngagement_reactedCount(ctx, field, obj)
		case "receivedReactionsCount":
			out.Values[i] = ec._UserEngagement_receivedReactionsCount(ctx, field, obj)
		case "followedUsersCount":
			out.Values[i] = ec._UserEngagement_followedUsersCount(ctx, field, obj)
		case "followedCount":
			out.Values[i] = ec._UserEngagement_followedCount(ctx, field, obj)
		case "invitedCount":
			out.Values[i] = ec._UserEngagement_invitedCount(ctx, field, obj)
		case "score":
			out.Values[i] = ec._UserEngagement_score(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UserEngagement_daysActive(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DaysActive
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_postCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PostCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_commentCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CommentCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_reactedCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ReactedCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_receivedReactionsCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ReceivedReactionsCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_followedUsersCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.FollowedUsersCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_followedCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.FollowedCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_invitedCount(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InvitedCount
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _UserEngagement_score(ctx context.Context, field graphql.CollectedField, obj *model.UserEngagement) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserEngagement"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Score
	return graphql.MarshalFloat(res)
}

var userIDImplementors = []string{"UserID"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UserID(ctx context.Context, sel []query.Selection, obj *UserID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, userIDImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserID")
		case "id":
			out.Values[i] = ec._UserID_id(ctx, field, obj)
		case "username":
			out.Values[i] = ec._UserID_username(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UserID_id(ctx context.Context, field graphql.CollectedField, obj *UserID) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserID"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return res
}

func (ec *executionContext) _UserID_username(ctx context.Context, field graphql.CollectedField, obj *UserID) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserID"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Username
	return graphql.MarshalString(res)
}

var waitlistEntryImplementors = []string{"WaitlistEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _WaitlistEntry(ctx context.Context, sel []query.Selection, obj *model.WaitlistEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, waitlistEntryImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WaitlistEntry")
		case "email":
			out.Values[i] = ec._WaitlistEntry_email(ctx, field, obj)
		case "comment":
			out.Values[i] = ec._WaitlistEntry_comment(ctx, field, obj)
		case "name":
			out.Values[i] = ec._WaitlistEntry_name(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._WaitlistEntry_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _WaitlistEntry_email(ctx context.Context, field graphql.CollectedField, obj *model.WaitlistEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "WaitlistEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Email
	return graphql.MarshalString(res)
}

func (ec *executionContext) _WaitlistEntry_comment(ctx context.Context, field graphql.CollectedField, obj *model.WaitlistEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "WaitlistEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Comment
	return graphql.MarshalString(res)
}

func (ec *executionContext) _WaitlistEntry_name(ctx context.Context, field graphql.CollectedField, obj *model.WaitlistEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "WaitlistEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _WaitlistEntry_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.WaitlistEntry) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "WaitlistEntry"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Directive(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Field(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___EnumValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func UnmarshalAnnouncementInput(v interface{}) (AnnouncementInput, error) {
	var it AnnouncementInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "toUsers":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				}
			}
			it.ToUsers = make([]globalid.ID, len(rawIf1))
			for idx1 := range rawIf1 {
				err = (&it.ToUsers[idx1]).UnmarshalGQL(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "toEveryone":
			var err error
			it.ToEveryone, err = graphql.UnmarshalBoolean(v)
			if err != nil {
				return it, err
			}
		case "forCard":
			var err error
			var ptr1 globalid.ID
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.ForCard = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "fromUser":
			var err error
			err = (&it.FromUser).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error
			it.Message, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalChannelInput(v interface{}) (ChannelInput, error) {
	var it ChannelInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error
			it.IsDefault, err = graphql.UnmarshalBoolean(v)
			if err != nil {
				return it, err
			}
		case "isPrivate":
			var err error
			var ptr1 bool
			if v != nil {
				ptr1, err = graphql.UnmarshalBoolean(v)
				it.IsPrivate = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalSettingsInput(v interface{}) (SettingsInput, error) {
	var it SettingsInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "signupsFrozen":
			var err error
			var ptr1 bool
			if v != nil {
				ptr1, err = graphql.UnmarshalBoolean(v)
				it.SignupsFrozen = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "maintenanceMode":
			var err error
			var ptr1 bool
			if v != nil {
				ptr1, err = graphql.UnmarshalBoolean(v)
				it.MaintenanceMode = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalUserInput(v interface{}) (UserInput, error) {
	var it UserInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "username":
			var err error
			it.Username, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "displayname":
			var err error
			it.Displayname, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "profilePictureURL":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.ProfilePictureURL = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "coverPictureURL":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.CoverPictureURL = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`type Query {
  cards(from: Time, to: Time, ids: [ID], introCards: Boolean): [Card]
  users(usernames: [String]): [User]
  sessions: [Session]
  settings: Settings
  invites: [Invite]
  featureSwitches: [FeatureSwitch]
  announcements: [Announcement]
  waitlist: [WaitlistEntry]
  connections: [Connection]
  channels: [Channel]
  channelEngagements: [ChannelEngagement]!
  cardEngagement(from: Date, to: Date): [CardEngagement]!
}

 type CardEngagement {
  id: ID!
  uniqueUserCommentCount: Int!
  totalLikeCount: Int!
  totalDislikeCount: Int!
  totalReplyCount: Int!
}

type Channel {
  id: ID!
  name: String!
  handle: String!
  isDefault: Boolean!
  isPrivate: Boolean!
}

type ChannelEngagement {
  channelID: ID!
  totalPosts: Int!
  totalLikes: Int!
  totalDislikes: Int!
  totalComments: Int!
  totalCommenters: Int!
}

type Mutation {
  generateExampleFeed(limitToChannels: [ID], limitToLastNHours: Int): [ID]
  previewUserFeed(userID: ID!): [ID]
  getCardConfidenceData(userID: ID!): [ConfidenceData]
  setUserDefaultStatus(id: ID!, status: Boolean!): String!
  shadowbanCards(ids: [ID]!): String!
  unshadowbanCards(ids: [ID]!): String!
  shadowbanUser(id: ID!): String!
  unshadowbanUser(id: ID!): String!
  recalculateLeaderboard(inviteReward: Int): String!
  deactivateInvite(id: ID!): String!
  setCardIntroStatus(id: ID!, status: Boolean!): String!
  blockUser(id: ID!, deleteCards: Boolean): String!
  unblockUser(id: ID!): String!
  createAnnouncement(announcement: AnnouncementInput!, sendPush: Boolean): Announcement
  deleteAnnouncement(id: ID!): String!
  deleteFeatureSwitch(featureID: ID!): String!
  createFeatureSwitch(state: String, name: String!): String!
  setFeatureSwitchState(featureID: ID!, state: String!): String!
  createInvite(userID: ID!, usesAllowed: Int): Invite
  createInvitesFromTokens(userID: ID!, tokens: [String]): [Invite]
  createUser(user: UserInput!): User
  resetPasswords(usernames: [String]!): String!
  toggleFeatureForUser(username: String!, featurename: String!): String!
  updateSettings(settings: SettingsInput!): String!
  updateWaitlist(comment: String!, email: String!): String!

  indexAllUsers(clearFirst: Boolean): String!
  indexAllChannels(clearFirst: Boolean): String!

  createChannel(channel: ChannelInput!): Channel
  updateChannel(id: ID!, channel: ChannelInput!): Channel
  createChannelInvite(channelID: ID!, inviterID: ID!): Invite
  updateCoinBalances(userID: ID!, coinBalance: Int, temporaryCoinBalance: Int): String!
  sendTestPush(userID: ID!, forCardID: ID, message: String!, typ: String!, action: String, actionData: String): String!
}
type SetParameterPayload {
  changed: Boolean!
}

input AnnouncementInput {
  toUsers: [ID]
  toEveryone: Boolean!
  forCard: ID
  fromUser: ID!
  message: String!
}
input UserInput {
  username: String!
  displayname: String!
  password: String!
  profilePictureURL: String
  coverPictureURL: String
  email: String!
}

input ChannelInput {
  name: String!
  isDefault: Boolean!
  isPrivate: Boolean
}

input SettingsInput {
  signupsFrozen: Boolean
  maintenanceMode: Boolean
}

type Author {
  id: ID!
  displayName: String!
  username: String!
  profileImagePath: String!
  isAnonymous: Boolean!
}

type Card {
  id: ID!
  title: String!
  content: String!
  URL: String!
  BackgroundColor: String!
  createdAt: Time!
  ownerID: ID!
  apparentAuthor: Author
}

type User {
  id: ID!
  username: String!
  email: String!
  displayName: String!
  isDefault: Boolean!
  profileImagePath: String!
  updatedAt: Time!
  blocked: Boolean!
  shadowbanned: Boolean!
  possibleUninstall: Boolean!
  lastActiveAt: ModelTime
  joinedFromInvite: Invite
  coinBalance: Int!
  temporaryCoinBalance: Int!
  postCount(from: Time, to: Time): Int!
  engagement(from: Date, to: Date): UserEngagement
}

type UserEngagement {
  daysActive: Int!
  postCount: Int!
  commentCount: Int!
  reactedCount:           Int!
  receivedReactionsCount: Int!
  followedUsersCount:     Int!
  followedCount:     Int!
  invitedCount: Int!
  score: Float!
}

type Settings {
  signupsFrozen: Boolean!
  maintenanceMode: Boolean!
}

type Invite {
  id: ID!
  token: String!
  groupID: ID
  hideFromUser: Boolean!
  createdAt: Time!
  issuer: User!
  remainingUses: Int!
}

type FeatureSwitch {
  id: ID!
  name: String!
  state: FeatureState!
  testingUsers: [ID]
  createdAt: Time!
  updatedAt: Time!
}

enum FeatureState {
  off
  testing
  on
}

type Announcement {
  id: ID!
  user: User
  card: Card
  message: String!
  createdAt: Time!
  updatedAt: Time!
}

type WaitlistEntry {
  email: String!
  comment: String!
  name: String!
  createdAt: Time!
}

type Session {
  id: ID!
  createdAt: Time!
  user: User!
}

type Connection {
  userAgent: String!
  ipAddress: String!
  adminPanel: Boolean!
  createdAt: Time!
  session: Session
}

type ConfidenceData {
  id: ID!
  upvoteCount: Int64!
  downvoteCount: Int64!
  commentCount: Int64!
  viewCount: Int64!
  goodness: Float!
  engagementScore: Float!
  confidence: Float!
  probabilitySurfaced: Float!
  rank: Float!
  scoreMod: Float!
}

type UserID {
  id: ID!
  username: String!
}

#should consolidate ModelTime with Time. hack because dataloader won't easily take time.Time
type ModelTime {
  time: Time
}

scalar Time
scalar Date
scalar Score
scalar Int64
scalar ScoreInt
`)
