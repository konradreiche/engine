// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package gql

import (
	fmt "fmt"
	io "io"
	strconv "strconv"

	globalid "github.com/october93/engine/kit/globalid"
)

type AnnouncementInput struct {
	ToUsers    []globalid.ID `json:"toUsers"`
	ToEveryone bool          `json:"toEveryone"`
	ForCard    *globalid.ID  `json:"forCard"`
	FromUser   globalid.ID   `json:"fromUser"`
	Message    string        `json:"message"`
}
type CardEngagement struct {
	ID                     globalid.ID `json:"id"`
	UniqueUserCommentCount int         `json:"uniqueUserCommentCount"`
	TotalLikeCount         int         `json:"totalLikeCount"`
	TotalDislikeCount      int         `json:"totalDislikeCount"`
	TotalReplyCount        int         `json:"totalReplyCount"`
}
type ChannelInput struct {
	Name      string `json:"name"`
	IsDefault bool   `json:"isDefault"`
	IsPrivate *bool  `json:"isPrivate"`
}
type SetParameterPayload struct {
	Changed bool `json:"changed"`
}
type SettingsInput struct {
	SignupsFrozen   *bool `json:"signupsFrozen"`
	MaintenanceMode *bool `json:"maintenanceMode"`
}
type UserID struct {
	ID       globalid.ID `json:"id"`
	Username string      `json:"username"`
}
type UserInput struct {
	Username          string  `json:"username"`
	Displayname       string  `json:"displayname"`
	Password          string  `json:"password"`
	ProfilePictureURL *string `json:"profilePictureURL"`
	CoverPictureURL   *string `json:"coverPictureURL"`
	Email             string  `json:"email"`
}

type FeatureState string

const (
	FeatureStateOff     FeatureState = "off"
	FeatureStateTesting FeatureState = "testing"
	FeatureStateOn      FeatureState = "on"
)

func (e FeatureState) IsValid() bool {
	switch e {
	case FeatureStateOff, FeatureStateTesting, FeatureStateOn:
		return true
	}
	return false
}

func (e FeatureState) String() string {
	return string(e)
}

func (e *FeatureState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FeatureState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FeatureState", str)
	}
	return nil
}

func (e FeatureState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
