// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/server.go.tmpl

package server

import (
	"context"
	"encoding/json"

	"github.com/october93/engine/model"
	"github.com/october93/engine/rpc"
	"github.com/october93/engine/rpc/protocol"
	"github.com/pkg/errors"
)

func AuthEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.AuthParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.Auth(ctx, rpc.AuthRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ResetPasswordEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ResetPasswordParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ResetPassword(ctx, rpc.ResetPasswordRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func LogoutEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.LogoutParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.Logout(ctx, rpc.LogoutRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func DeleteCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.DeleteCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.DeleteCard(ctx, rpc.DeleteCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func FollowUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.FollowUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.FollowUser(ctx, rpc.FollowUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnfollowUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnfollowUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnfollowUser(ctx, rpc.UnfollowUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetFollowingUsersEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetFollowingUsersParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetFollowingUsers(ctx, rpc.GetFollowingUsersRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetPostsForUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetPostsForUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetPostsForUser(ctx, rpc.GetPostsForUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetCardsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetCardsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetCards(ctx, rpc.GetCardsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetCard(ctx, rpc.GetCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetThreadEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetThreadParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetThread(ctx, rpc.GetThreadRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ReactToCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ReactToCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ReactToCard(ctx, rpc.ReactToCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func VoteOnCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.VoteOnCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.VoteOnCard(ctx, rpc.VoteOnCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func PostCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.PostCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.PostCard(ctx, rpc.PostCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func NewInviteEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.NewInviteParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.NewInvite(ctx, rpc.NewInviteRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func RegisterDeviceEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.RegisterDeviceParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.RegisterDevice(ctx, rpc.RegisterDeviceRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnregisterDeviceEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnregisterDeviceParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnregisterDevice(ctx, rpc.UnregisterDeviceRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UpdateSettingsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UpdateSettingsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UpdateSettings(ctx, rpc.UpdateSettingsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func NewUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.NewUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.NewUser(ctx, rpc.NewUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ValidateInviteCodeEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ValidateInviteCodeParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ValidateInviteCode(ctx, rpc.ValidateInviteCodeRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func AddToWaitlistEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.AddToWaitlistParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.AddToWaitlist(ctx, rpc.AddToWaitlistRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetUsersEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetUsersParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetUsers(ctx, rpc.GetUsersRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetUser(ctx, rpc.GetUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ValidateUsernameEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ValidateUsernameParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ValidateUsername(ctx, rpc.ValidateUsernameRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetNotificationsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetNotificationsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetNotifications(ctx, rpc.GetNotificationsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UpdateNotificationsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UpdateNotificationsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UpdateNotifications(ctx, rpc.UpdateNotificationsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetAnonymousHandleEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetAnonymousHandleParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetAnonymousHandle(ctx, rpc.GetAnonymousHandleRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetTagsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetTagsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetTags(ctx, rpc.GetTagsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetFeaturesForUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetFeaturesForUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetFeaturesForUser(ctx, rpc.GetFeaturesForUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func PreviewContentEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.PreviewContentParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.PreviewContent(ctx, rpc.PreviewContentRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UploadImageEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UploadImageParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UploadImage(ctx, rpc.UploadImageRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ConnectUsersEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ConnectUsersParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ConnectUsers(ctx, rpc.ConnectUsersRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ModifyCardScoreEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ModifyCardScoreParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ModifyCardScore(ctx, rpc.ModifyCardScoreRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetInvitesEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetInvitesParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetInvites(ctx, rpc.GetInvitesRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetOnboardingDataEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetOnboardingDataParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetOnboardingData(ctx, rpc.GetOnboardingDataRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetMyNetworkEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetMyNetworkParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetMyNetwork(ctx, rpc.GetMyNetworkRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetTaggableUsersEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetTaggableUsersParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetTaggableUsers(ctx, rpc.GetTaggableUsersRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GroupInvitesEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GroupInvitesParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GroupInvites(ctx, rpc.GroupInvitesRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnsubscribeFromCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnsubscribeFromCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnsubscribeFromCard(ctx, rpc.UnsubscribeFromCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func SubscribeToCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.SubscribeToCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.SubscribeToCard(ctx, rpc.SubscribeToCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ReportCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ReportCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ReportCard(ctx, rpc.ReportCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func SubmitFeedbackEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.SubmitFeedbackParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.SubmitFeedback(ctx, rpc.SubmitFeedbackRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func TipCardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.TipCardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.TipCard(ctx, rpc.TipCardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func BlockUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.BlockUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.BlockUser(ctx, rpc.BlockUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetCardsForChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetCardsForChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetCardsForChannel(ctx, rpc.GetCardsForChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UpdateChannelSubscriptionEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UpdateChannelSubscriptionParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UpdateChannelSubscription(ctx, rpc.UpdateChannelSubscriptionRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetChannelsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetChannelsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetChannels(ctx, rpc.GetChannelsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func JoinChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.JoinChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.JoinChannel(ctx, rpc.JoinChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func LeaveChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.LeaveChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.LeaveChannel(ctx, rpc.LeaveChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func MuteChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.MuteChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.MuteChannel(ctx, rpc.MuteChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnmuteChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnmuteChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnmuteChannel(ctx, rpc.UnmuteChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func MuteUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.MuteUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.MuteUser(ctx, rpc.MuteUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnmuteUserEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnmuteUserParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnmuteUser(ctx, rpc.UnmuteUserRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func MuteThreadEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.MuteThreadParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.MuteThread(ctx, rpc.MuteThreadRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UnmuteThreadEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UnmuteThreadParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UnmuteThread(ctx, rpc.UnmuteThreadRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func CreateChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.CreateChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.CreateChannel(ctx, rpc.CreateChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetPopularCardsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetPopularCardsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetPopularCards(ctx, rpc.GetPopularCardsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetActionCostsEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetActionCostsParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetActionCosts(ctx, rpc.GetActionCostsRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func UseInviteCodeEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.UseInviteCodeParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.UseInviteCode(ctx, rpc.UseInviteCodeRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func RequestValidationEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.RequestValidationParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.RequestValidation(ctx, rpc.RequestValidationRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ConfirmValidationEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ConfirmValidationParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ConfirmValidation(ctx, rpc.ConfirmValidationRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func ValidateChannelNameEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.ValidateChannelNameParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.ValidateChannelName(ctx, rpc.ValidateChannelNameRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetChannelEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetChannelParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetChannel(ctx, rpc.GetChannelRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func CanAffordAnonymousPostEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.CanAffordAnonymousPostParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.CanAffordAnonymousPost(ctx, rpc.CanAffordAnonymousPostRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}

func GetLeaderboardEndpoint(r rpc.RPC) protocol.MessageEndpoint {
	return func(ctx context.Context, s *model.Session, pw *protocol.PushWriter, m protocol.Message) error {
		var params rpc.GetLeaderboardParams
		if len(m.Data) > 0 {
			err := json.Unmarshal(m.Data, &params)
			if err != nil {
				return protocol.DefaultEncoder(ctx, nil, err, pw)
			}
		}
		err := params.Validate()
		if err != nil {
			return protocol.DefaultEncoder(ctx, nil, err, pw)
		}
		resp, err := r.GetLeaderboard(ctx, rpc.GetLeaderboardRequest{Params: params, Session: s})
		return protocol.DefaultEncoder(ctx, resp, errors.Cause(err), pw)
	}
}
