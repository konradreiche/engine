// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/client.go.tmpl

package client

import (
	"context"
	"encoding/json"
	"time"

	"github.com/october93/engine/rpc"
)

func (c *Client) Auth(ctx context.Context, req rpc.AuthRequest) (*rpc.AuthResponse, error) {
	m := NewMessage(rpc.Auth)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.AuthResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ResetPassword(ctx context.Context, req rpc.ResetPasswordRequest) (*rpc.ResetPasswordResponse, error) {
	m := NewMessage(rpc.ResetPassword)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ResetPasswordResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) Logout(ctx context.Context, req rpc.LogoutRequest) (*rpc.LogoutResponse, error) {
	m := NewMessage(rpc.Logout)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.LogoutResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) DeleteCard(ctx context.Context, req rpc.DeleteCardRequest) (*rpc.DeleteCardResponse, error) {
	m := NewMessage(rpc.DeleteCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.DeleteCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) FollowUser(ctx context.Context, req rpc.FollowUserRequest) (*rpc.FollowUserResponse, error) {
	m := NewMessage(rpc.FollowUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.FollowUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnfollowUser(ctx context.Context, req rpc.UnfollowUserRequest) (*rpc.UnfollowUserResponse, error) {
	m := NewMessage(rpc.UnfollowUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnfollowUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetFollowingUsers(ctx context.Context, req rpc.GetFollowingUsersRequest) (*rpc.GetFollowingUsersResponse, error) {
	m := NewMessage(rpc.GetFollowingUsers)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetFollowingUsersResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetPostsForUser(ctx context.Context, req rpc.GetPostsForUserRequest) (*rpc.GetPostsForUserResponse, error) {
	m := NewMessage(rpc.GetPostsForUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetPostsForUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetCards(ctx context.Context, req rpc.GetCardsRequest) (*rpc.GetCardsResponse, error) {
	m := NewMessage(rpc.GetCards)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetCardsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetCard(ctx context.Context, req rpc.GetCardRequest) (*rpc.GetCardResponse, error) {
	m := NewMessage(rpc.GetCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetThread(ctx context.Context, req rpc.GetThreadRequest) (*rpc.GetThreadResponse, error) {
	m := NewMessage(rpc.GetThread)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetThreadResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ReactToCard(ctx context.Context, req rpc.ReactToCardRequest) (*rpc.ReactToCardResponse, error) {
	m := NewMessage(rpc.ReactToCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ReactToCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) VoteOnCard(ctx context.Context, req rpc.VoteOnCardRequest) (*rpc.VoteOnCardResponse, error) {
	m := NewMessage(rpc.VoteOnCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.VoteOnCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) PostCard(ctx context.Context, req rpc.PostCardRequest) (*rpc.PostCardResponse, error) {
	m := NewMessage(rpc.PostCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.PostCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) NewInvite(ctx context.Context, req rpc.NewInviteRequest) (*rpc.NewInviteResponse, error) {
	m := NewMessage(rpc.NewInvite)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.NewInviteResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) RegisterDevice(ctx context.Context, req rpc.RegisterDeviceRequest) (*rpc.RegisterDeviceResponse, error) {
	m := NewMessage(rpc.RegisterDevice)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.RegisterDeviceResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnregisterDevice(ctx context.Context, req rpc.UnregisterDeviceRequest) (*rpc.UnregisterDeviceResponse, error) {
	m := NewMessage(rpc.UnregisterDevice)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnregisterDeviceResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UpdateSettings(ctx context.Context, req rpc.UpdateSettingsRequest) (*rpc.UpdateSettingsResponse, error) {
	m := NewMessage(rpc.UpdateSettings)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UpdateSettingsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) NewUser(ctx context.Context, req rpc.NewUserRequest) (*rpc.NewUserResponse, error) {
	m := NewMessage(rpc.NewUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.NewUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ValidateInviteCode(ctx context.Context, req rpc.ValidateInviteCodeRequest) (*rpc.ValidateInviteCodeResponse, error) {
	m := NewMessage(rpc.ValidateInviteCode)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ValidateInviteCodeResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) AddToWaitlist(ctx context.Context, req rpc.AddToWaitlistRequest) (*rpc.AddToWaitlistResponse, error) {
	m := NewMessage(rpc.AddToWaitlist)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.AddToWaitlistResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetUsers(ctx context.Context, req rpc.GetUsersRequest) (*rpc.GetUsersResponse, error) {
	m := NewMessage(rpc.GetUsers)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetUsersResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetUser(ctx context.Context, req rpc.GetUserRequest) (*rpc.GetUserResponse, error) {
	m := NewMessage(rpc.GetUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ValidateUsername(ctx context.Context, req rpc.ValidateUsernameRequest) (*rpc.ValidateUsernameResponse, error) {
	m := NewMessage(rpc.ValidateUsername)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ValidateUsernameResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetNotifications(ctx context.Context, req rpc.GetNotificationsRequest) (*rpc.GetNotificationsResponse, error) {
	m := NewMessage(rpc.GetNotifications)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetNotificationsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UpdateNotifications(ctx context.Context, req rpc.UpdateNotificationsRequest) (*rpc.UpdateNotificationsResponse, error) {
	m := NewMessage(rpc.UpdateNotifications)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UpdateNotificationsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetAnonymousHandle(ctx context.Context, req rpc.GetAnonymousHandleRequest) (*rpc.GetAnonymousHandleResponse, error) {
	m := NewMessage(rpc.GetAnonymousHandle)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetAnonymousHandleResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetTags(ctx context.Context, req rpc.GetTagsRequest) (*rpc.GetTagsResponse, error) {
	m := NewMessage(rpc.GetTags)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetTagsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetFeaturesForUser(ctx context.Context, req rpc.GetFeaturesForUserRequest) (*rpc.GetFeaturesForUserResponse, error) {
	m := NewMessage(rpc.GetFeaturesForUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetFeaturesForUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) PreviewContent(ctx context.Context, req rpc.PreviewContentRequest) (*rpc.PreviewContentResponse, error) {
	m := NewMessage(rpc.PreviewContent)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.PreviewContentResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UploadImage(ctx context.Context, req rpc.UploadImageRequest) (*rpc.UploadImageResponse, error) {
	m := NewMessage(rpc.UploadImage)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UploadImageResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ConnectUsers(ctx context.Context, req rpc.ConnectUsersRequest) (*rpc.ConnectUsersResponse, error) {
	m := NewMessage(rpc.ConnectUsers)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ConnectUsersResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ModifyCardScore(ctx context.Context, req rpc.ModifyCardScoreRequest) (*rpc.ModifyCardScoreResponse, error) {
	m := NewMessage(rpc.ModifyCardScore)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ModifyCardScoreResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetInvites(ctx context.Context, req rpc.GetInvitesRequest) (*rpc.GetInvitesResponse, error) {
	m := NewMessage(rpc.GetInvites)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetInvitesResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetOnboardingData(ctx context.Context, req rpc.GetOnboardingDataRequest) (*rpc.GetOnboardingDataResponse, error) {
	m := NewMessage(rpc.GetOnboardingData)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetOnboardingDataResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetMyNetwork(ctx context.Context, req rpc.GetMyNetworkRequest) (*rpc.GetMyNetworkResponse, error) {
	m := NewMessage(rpc.GetMyNetwork)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetMyNetworkResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetTaggableUsers(ctx context.Context, req rpc.GetTaggableUsersRequest) (*rpc.GetTaggableUsersResponse, error) {
	m := NewMessage(rpc.GetTaggableUsers)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetTaggableUsersResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GroupInvites(ctx context.Context, req rpc.GroupInvitesRequest) (*rpc.GroupInvitesResponse, error) {
	m := NewMessage(rpc.GroupInvites)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GroupInvitesResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnsubscribeFromCard(ctx context.Context, req rpc.UnsubscribeFromCardRequest) (*rpc.UnsubscribeFromCardResponse, error) {
	m := NewMessage(rpc.UnsubscribeFromCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnsubscribeFromCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) SubscribeToCard(ctx context.Context, req rpc.SubscribeToCardRequest) (*rpc.SubscribeToCardResponse, error) {
	m := NewMessage(rpc.SubscribeToCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.SubscribeToCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ReportCard(ctx context.Context, req rpc.ReportCardRequest) (*rpc.ReportCardResponse, error) {
	m := NewMessage(rpc.ReportCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ReportCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) SubmitFeedback(ctx context.Context, req rpc.SubmitFeedbackRequest) (*rpc.SubmitFeedbackResponse, error) {
	m := NewMessage(rpc.SubmitFeedback)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.SubmitFeedbackResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) TipCard(ctx context.Context, req rpc.TipCardRequest) (*rpc.TipCardResponse, error) {
	m := NewMessage(rpc.TipCard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.TipCardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) BlockUser(ctx context.Context, req rpc.BlockUserRequest) (*rpc.BlockUserResponse, error) {
	m := NewMessage(rpc.BlockUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.BlockUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetCardsForChannel(ctx context.Context, req rpc.GetCardsForChannelRequest) (*rpc.GetCardsForChannelResponse, error) {
	m := NewMessage(rpc.GetCardsForChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetCardsForChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UpdateChannelSubscription(ctx context.Context, req rpc.UpdateChannelSubscriptionRequest) (*rpc.UpdateChannelSubscriptionResponse, error) {
	m := NewMessage(rpc.UpdateChannelSubscription)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UpdateChannelSubscriptionResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetChannels(ctx context.Context, req rpc.GetChannelsRequest) (*rpc.GetChannelsResponse, error) {
	m := NewMessage(rpc.GetChannels)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetChannelsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) JoinChannel(ctx context.Context, req rpc.JoinChannelRequest) (*rpc.JoinChannelResponse, error) {
	m := NewMessage(rpc.JoinChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.JoinChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) LeaveChannel(ctx context.Context, req rpc.LeaveChannelRequest) (*rpc.LeaveChannelResponse, error) {
	m := NewMessage(rpc.LeaveChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.LeaveChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) MuteChannel(ctx context.Context, req rpc.MuteChannelRequest) (*rpc.MuteChannelResponse, error) {
	m := NewMessage(rpc.MuteChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.MuteChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnmuteChannel(ctx context.Context, req rpc.UnmuteChannelRequest) (*rpc.UnmuteChannelResponse, error) {
	m := NewMessage(rpc.UnmuteChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnmuteChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) MuteUser(ctx context.Context, req rpc.MuteUserRequest) (*rpc.MuteUserResponse, error) {
	m := NewMessage(rpc.MuteUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.MuteUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnmuteUser(ctx context.Context, req rpc.UnmuteUserRequest) (*rpc.UnmuteUserResponse, error) {
	m := NewMessage(rpc.UnmuteUser)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnmuteUserResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) MuteThread(ctx context.Context, req rpc.MuteThreadRequest) (*rpc.MuteThreadResponse, error) {
	m := NewMessage(rpc.MuteThread)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.MuteThreadResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UnmuteThread(ctx context.Context, req rpc.UnmuteThreadRequest) (*rpc.UnmuteThreadResponse, error) {
	m := NewMessage(rpc.UnmuteThread)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UnmuteThreadResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) CreateChannel(ctx context.Context, req rpc.CreateChannelRequest) (*rpc.CreateChannelResponse, error) {
	m := NewMessage(rpc.CreateChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.CreateChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetPopularCards(ctx context.Context, req rpc.GetPopularCardsRequest) (*rpc.GetPopularCardsResponse, error) {
	m := NewMessage(rpc.GetPopularCards)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetPopularCardsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetActionCosts(ctx context.Context, req rpc.GetActionCostsRequest) (*rpc.GetActionCostsResponse, error) {
	m := NewMessage(rpc.GetActionCosts)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetActionCostsResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) UseInviteCode(ctx context.Context, req rpc.UseInviteCodeRequest) (*rpc.UseInviteCodeResponse, error) {
	m := NewMessage(rpc.UseInviteCode)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.UseInviteCodeResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) RequestValidation(ctx context.Context, req rpc.RequestValidationRequest) (*rpc.RequestValidationResponse, error) {
	m := NewMessage(rpc.RequestValidation)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.RequestValidationResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ConfirmValidation(ctx context.Context, req rpc.ConfirmValidationRequest) (*rpc.ConfirmValidationResponse, error) {
	m := NewMessage(rpc.ConfirmValidation)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ConfirmValidationResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) ValidateChannelName(ctx context.Context, req rpc.ValidateChannelNameRequest) (*rpc.ValidateChannelNameResponse, error) {
	m := NewMessage(rpc.ValidateChannelName)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.ValidateChannelNameResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetChannel(ctx context.Context, req rpc.GetChannelRequest) (*rpc.GetChannelResponse, error) {
	m := NewMessage(rpc.GetChannel)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetChannelResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) CanAffordAnonymousPost(ctx context.Context, req rpc.CanAffordAnonymousPostRequest) (*rpc.CanAffordAnonymousPostResponse, error) {
	m := NewMessage(rpc.CanAffordAnonymousPost)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.CanAffordAnonymousPostResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}

func (c *Client) GetLeaderboard(ctx context.Context, req rpc.GetLeaderboardRequest) (*rpc.GetLeaderboardResponse, error) {
	m := NewMessage(rpc.GetLeaderboard)
	err := m.EncodePayload(req.Params)
	if err != nil {
		return nil, err
	}
	responser := c.registerRequest(m.RequestID)
	defer c.unregisterRequest(m.RequestID)
	err = c.w.WriteJSON(m)
	if err != nil {
		return nil, err
	}
	var resp string
	select {
	case resp = <-responser:
	case <-time.After(c.config.Timeout):
		return nil, ErrTimeout
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	m, err = c.DecodeGenericResponse(resp)
	if err != nil {
		return nil, err
	}
	var result rpc.GetLeaderboardResponse
	err = json.Unmarshal(m.Data, &result)
	return &result, err
}
