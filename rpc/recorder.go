// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/recorder.go.tmpl

package rpc

import (
	"context"
	"encoding/json"

	"github.com/october93/engine/kit/globalid"
	"github.com/october93/engine/kit/log"
	"github.com/october93/engine/model"
	"github.com/october93/engine/worker/activityrecorder"
)

type recordingMiddleware struct {
	RPC
	recorder *activityrecorder.ActivityRecorder
	log      log.Logger
}

func NewRecordingMiddleware(r RPC, recorder *activityrecorder.ActivityRecorder, log log.Logger) RPC {
	return &recordingMiddleware{
		RPC:      r,
		recorder: recorder,
		log:      log,
	}
}

func (rm *recordingMiddleware) Auth(ctx context.Context, req AuthRequest) (*AuthResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(Auth, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.Auth(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ResetPassword(ctx context.Context, req ResetPasswordRequest) (*ResetPasswordResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ResetPassword, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ResetPassword(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) Logout(ctx context.Context, req LogoutRequest) (*LogoutResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(Logout, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.Logout(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) DeleteCard(ctx context.Context, req DeleteCardRequest) (*DeleteCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(DeleteCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.DeleteCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) FollowUser(ctx context.Context, req FollowUserRequest) (*FollowUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(FollowUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.FollowUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnfollowUser(ctx context.Context, req UnfollowUserRequest) (*UnfollowUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnfollowUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnfollowUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetFollowingUsers(ctx context.Context, req GetFollowingUsersRequest) (*GetFollowingUsersResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetFollowingUsers, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetFollowingUsers(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetPostsForUser(ctx context.Context, req GetPostsForUserRequest) (*GetPostsForUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetPostsForUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetPostsForUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetCards(ctx context.Context, req GetCardsRequest) (*GetCardsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetCards, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetCards(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetCard(ctx context.Context, req GetCardRequest) (*GetCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetThread(ctx context.Context, req GetThreadRequest) (*GetThreadResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetThread, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetThread(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ReactToCard(ctx context.Context, req ReactToCardRequest) (*ReactToCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ReactToCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ReactToCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) VoteOnCard(ctx context.Context, req VoteOnCardRequest) (*VoteOnCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(VoteOnCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.VoteOnCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) PostCard(ctx context.Context, req PostCardRequest) (*PostCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(PostCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.PostCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) NewInvite(ctx context.Context, req NewInviteRequest) (*NewInviteResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(NewInvite, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.NewInvite(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) RegisterDevice(ctx context.Context, req RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(RegisterDevice, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.RegisterDevice(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnregisterDevice(ctx context.Context, req UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnregisterDevice, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnregisterDevice(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UpdateSettings(ctx context.Context, req UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UpdateSettings, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UpdateSettings(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) NewUser(ctx context.Context, req NewUserRequest) (*NewUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(NewUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.NewUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ValidateInviteCode(ctx context.Context, req ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ValidateInviteCode, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ValidateInviteCode(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) AddToWaitlist(ctx context.Context, req AddToWaitlistRequest) (*AddToWaitlistResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(AddToWaitlist, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.AddToWaitlist(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetUsers(ctx context.Context, req GetUsersRequest) (*GetUsersResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetUsers, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetUsers(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetUser(ctx context.Context, req GetUserRequest) (*GetUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ValidateUsername(ctx context.Context, req ValidateUsernameRequest) (*ValidateUsernameResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ValidateUsername, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ValidateUsername(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetNotifications(ctx context.Context, req GetNotificationsRequest) (*GetNotificationsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetNotifications, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetNotifications(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UpdateNotifications(ctx context.Context, req UpdateNotificationsRequest) (*UpdateNotificationsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UpdateNotifications, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UpdateNotifications(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetAnonymousHandle(ctx context.Context, req GetAnonymousHandleRequest) (*GetAnonymousHandleResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetAnonymousHandle, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetAnonymousHandle(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetTags(ctx context.Context, req GetTagsRequest) (*GetTagsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetTags, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetTags(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetFeaturesForUser(ctx context.Context, req GetFeaturesForUserRequest) (*GetFeaturesForUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetFeaturesForUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetFeaturesForUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) PreviewContent(ctx context.Context, req PreviewContentRequest) (*PreviewContentResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(PreviewContent, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.PreviewContent(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UploadImage(ctx context.Context, req UploadImageRequest) (*UploadImageResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UploadImage, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UploadImage(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ConnectUsers(ctx context.Context, req ConnectUsersRequest) (*ConnectUsersResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ConnectUsers, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ConnectUsers(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ModifyCardScore(ctx context.Context, req ModifyCardScoreRequest) (*ModifyCardScoreResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ModifyCardScore, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ModifyCardScore(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetInvites(ctx context.Context, req GetInvitesRequest) (*GetInvitesResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetInvites, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetInvites(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetOnboardingData(ctx context.Context, req GetOnboardingDataRequest) (*GetOnboardingDataResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetOnboardingData, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetOnboardingData(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetMyNetwork(ctx context.Context, req GetMyNetworkRequest) (*GetMyNetworkResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetMyNetwork, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetMyNetwork(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetTaggableUsers(ctx context.Context, req GetTaggableUsersRequest) (*GetTaggableUsersResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetTaggableUsers, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetTaggableUsers(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GroupInvites(ctx context.Context, req GroupInvitesRequest) (*GroupInvitesResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GroupInvites, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GroupInvites(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnsubscribeFromCard(ctx context.Context, req UnsubscribeFromCardRequest) (*UnsubscribeFromCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnsubscribeFromCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnsubscribeFromCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) SubscribeToCard(ctx context.Context, req SubscribeToCardRequest) (*SubscribeToCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(SubscribeToCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.SubscribeToCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ReportCard(ctx context.Context, req ReportCardRequest) (*ReportCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ReportCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ReportCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) SubmitFeedback(ctx context.Context, req SubmitFeedbackRequest) (*SubmitFeedbackResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(SubmitFeedback, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.SubmitFeedback(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) TipCard(ctx context.Context, req TipCardRequest) (*TipCardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(TipCard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.TipCard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) BlockUser(ctx context.Context, req BlockUserRequest) (*BlockUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(BlockUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.BlockUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetCardsForChannel(ctx context.Context, req GetCardsForChannelRequest) (*GetCardsForChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetCardsForChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetCardsForChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UpdateChannelSubscription(ctx context.Context, req UpdateChannelSubscriptionRequest) (*UpdateChannelSubscriptionResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UpdateChannelSubscription, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UpdateChannelSubscription(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetChannels(ctx context.Context, req GetChannelsRequest) (*GetChannelsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetChannels, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetChannels(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) JoinChannel(ctx context.Context, req JoinChannelRequest) (*JoinChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(JoinChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.JoinChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) LeaveChannel(ctx context.Context, req LeaveChannelRequest) (*LeaveChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(LeaveChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.LeaveChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) MuteChannel(ctx context.Context, req MuteChannelRequest) (*MuteChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(MuteChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.MuteChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnmuteChannel(ctx context.Context, req UnmuteChannelRequest) (*UnmuteChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnmuteChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnmuteChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) MuteUser(ctx context.Context, req MuteUserRequest) (*MuteUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(MuteUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.MuteUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnmuteUser(ctx context.Context, req UnmuteUserRequest) (*UnmuteUserResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnmuteUser, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnmuteUser(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) MuteThread(ctx context.Context, req MuteThreadRequest) (*MuteThreadResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(MuteThread, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.MuteThread(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UnmuteThread(ctx context.Context, req UnmuteThreadRequest) (*UnmuteThreadResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UnmuteThread, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UnmuteThread(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) CreateChannel(ctx context.Context, req CreateChannelRequest) (*CreateChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(CreateChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.CreateChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetPopularCards(ctx context.Context, req GetPopularCardsRequest) (*GetPopularCardsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetPopularCards, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetPopularCards(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetActionCosts(ctx context.Context, req GetActionCostsRequest) (*GetActionCostsResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetActionCosts, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetActionCosts(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) UseInviteCode(ctx context.Context, req UseInviteCodeRequest) (*UseInviteCodeResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(UseInviteCode, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.UseInviteCode(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) RequestValidation(ctx context.Context, req RequestValidationRequest) (*RequestValidationResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(RequestValidation, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.RequestValidation(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ConfirmValidation(ctx context.Context, req ConfirmValidationRequest) (*ConfirmValidationResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ConfirmValidation, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ConfirmValidation(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) ValidateChannelName(ctx context.Context, req ValidateChannelNameRequest) (*ValidateChannelNameResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(ValidateChannelName, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.ValidateChannelName(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetChannel(ctx context.Context, req GetChannelRequest) (*GetChannelResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetChannel, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetChannel(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) CanAffordAnonymousPost(ctx context.Context, req CanAffordAnonymousPostRequest) (*CanAffordAnonymousPostResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(CanAffordAnonymousPost, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.CanAffordAnonymousPost(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) GetLeaderboard(ctx context.Context, req GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob(GetLeaderboard, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.GetLeaderboard(ctx, req)
	return result, err
}

func (rm *recordingMiddleware) enqueueJob(rpc string, data interface{}, userID globalid.ID, err error) error {
	activity := &model.Activity{
		RPC: rpc,
	}
	if userID != globalid.Nil {
		activity.UserID = userID
	}
	if err != nil {
		activity.Error = err.Error()
	}
	activity.Data, err = json.Marshal(data)
	if err != nil {
		return err
	}
	return rm.recorder.EnqueueJob(activity)
}
