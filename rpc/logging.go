// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/logging.go.tmpl

package rpc

import (
	"context"

	"github.com/october93/engine/kit/log"
	rpccontext "github.com/october93/engine/rpc/context"
	"github.com/pkg/errors"
)

type loggingMiddleware struct {
	log log.Logger
	r   RPC
}

func NewLoggingMiddleware(r RPC, log log.Logger) RPC {
	return &loggingMiddleware{
		log: log,
		r:   r,
	}
}

func (lm *loggingMiddleware) Auth(ctx context.Context, req AuthRequest) (*AuthResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", Auth,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", Auth,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.Auth(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ResetPassword(ctx context.Context, req ResetPasswordRequest) (*ResetPasswordResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ResetPassword,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ResetPassword,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ResetPassword(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) Logout(ctx context.Context, req LogoutRequest) (*LogoutResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", Logout,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", Logout,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.Logout(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) DeleteCard(ctx context.Context, req DeleteCardRequest) (*DeleteCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", DeleteCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", DeleteCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.DeleteCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) FollowUser(ctx context.Context, req FollowUserRequest) (*FollowUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", FollowUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", FollowUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.FollowUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnfollowUser(ctx context.Context, req UnfollowUserRequest) (*UnfollowUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnfollowUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnfollowUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnfollowUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetFollowingUsers(ctx context.Context, req GetFollowingUsersRequest) (*GetFollowingUsersResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetFollowingUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetFollowingUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetFollowingUsers(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetPostsForUser(ctx context.Context, req GetPostsForUserRequest) (*GetPostsForUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetPostsForUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetPostsForUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetPostsForUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetCards(ctx context.Context, req GetCardsRequest) (*GetCardsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetCards,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetCards,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetCards(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetCard(ctx context.Context, req GetCardRequest) (*GetCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetThread(ctx context.Context, req GetThreadRequest) (*GetThreadResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetThread(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ReactToCard(ctx context.Context, req ReactToCardRequest) (*ReactToCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ReactToCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ReactToCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ReactToCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) VoteOnCard(ctx context.Context, req VoteOnCardRequest) (*VoteOnCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", VoteOnCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", VoteOnCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.VoteOnCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) PostCard(ctx context.Context, req PostCardRequest) (*PostCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", PostCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", PostCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.PostCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) NewInvite(ctx context.Context, req NewInviteRequest) (*NewInviteResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", NewInvite,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", NewInvite,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.NewInvite(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) RegisterDevice(ctx context.Context, req RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", RegisterDevice,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", RegisterDevice,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.RegisterDevice(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnregisterDevice(ctx context.Context, req UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnregisterDevice,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnregisterDevice,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnregisterDevice(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UpdateSettings(ctx context.Context, req UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UpdateSettings,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UpdateSettings,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UpdateSettings(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) NewUser(ctx context.Context, req NewUserRequest) (*NewUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", NewUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", NewUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.NewUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ValidateInviteCode(ctx context.Context, req ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ValidateInviteCode,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ValidateInviteCode,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ValidateInviteCode(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) AddToWaitlist(ctx context.Context, req AddToWaitlistRequest) (*AddToWaitlistResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", AddToWaitlist,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", AddToWaitlist,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.AddToWaitlist(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetUsers(ctx context.Context, req GetUsersRequest) (*GetUsersResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetUsers(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetUser(ctx context.Context, req GetUserRequest) (*GetUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ValidateUsername(ctx context.Context, req ValidateUsernameRequest) (*ValidateUsernameResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ValidateUsername,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ValidateUsername,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ValidateUsername(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetNotifications(ctx context.Context, req GetNotificationsRequest) (*GetNotificationsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetNotifications,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetNotifications,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetNotifications(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UpdateNotifications(ctx context.Context, req UpdateNotificationsRequest) (*UpdateNotificationsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UpdateNotifications,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UpdateNotifications,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UpdateNotifications(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetAnonymousHandle(ctx context.Context, req GetAnonymousHandleRequest) (*GetAnonymousHandleResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetAnonymousHandle,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetAnonymousHandle,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetAnonymousHandle(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetTags(ctx context.Context, req GetTagsRequest) (*GetTagsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetTags,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetTags,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetTags(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetFeaturesForUser(ctx context.Context, req GetFeaturesForUserRequest) (*GetFeaturesForUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetFeaturesForUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetFeaturesForUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetFeaturesForUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) PreviewContent(ctx context.Context, req PreviewContentRequest) (*PreviewContentResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", PreviewContent,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", PreviewContent,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.PreviewContent(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UploadImage(ctx context.Context, req UploadImageRequest) (*UploadImageResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UploadImage,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UploadImage,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UploadImage(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ConnectUsers(ctx context.Context, req ConnectUsersRequest) (*ConnectUsersResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ConnectUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ConnectUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ConnectUsers(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ModifyCardScore(ctx context.Context, req ModifyCardScoreRequest) (*ModifyCardScoreResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ModifyCardScore,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ModifyCardScore,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ModifyCardScore(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetInvites(ctx context.Context, req GetInvitesRequest) (*GetInvitesResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetInvites,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetInvites,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetInvites(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetOnboardingData(ctx context.Context, req GetOnboardingDataRequest) (*GetOnboardingDataResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetOnboardingData,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetOnboardingData,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetOnboardingData(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetMyNetwork(ctx context.Context, req GetMyNetworkRequest) (*GetMyNetworkResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetMyNetwork,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetMyNetwork,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetMyNetwork(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetTaggableUsers(ctx context.Context, req GetTaggableUsersRequest) (*GetTaggableUsersResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetTaggableUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetTaggableUsers,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetTaggableUsers(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GroupInvites(ctx context.Context, req GroupInvitesRequest) (*GroupInvitesResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GroupInvites,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GroupInvites,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GroupInvites(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnsubscribeFromCard(ctx context.Context, req UnsubscribeFromCardRequest) (*UnsubscribeFromCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnsubscribeFromCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnsubscribeFromCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnsubscribeFromCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) SubscribeToCard(ctx context.Context, req SubscribeToCardRequest) (*SubscribeToCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", SubscribeToCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", SubscribeToCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.SubscribeToCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ReportCard(ctx context.Context, req ReportCardRequest) (*ReportCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ReportCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ReportCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ReportCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) SubmitFeedback(ctx context.Context, req SubmitFeedbackRequest) (*SubmitFeedbackResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", SubmitFeedback,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", SubmitFeedback,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.SubmitFeedback(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) TipCard(ctx context.Context, req TipCardRequest) (*TipCardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", TipCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", TipCard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.TipCard(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) BlockUser(ctx context.Context, req BlockUserRequest) (*BlockUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", BlockUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", BlockUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.BlockUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetCardsForChannel(ctx context.Context, req GetCardsForChannelRequest) (*GetCardsForChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetCardsForChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetCardsForChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetCardsForChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UpdateChannelSubscription(ctx context.Context, req UpdateChannelSubscriptionRequest) (*UpdateChannelSubscriptionResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UpdateChannelSubscription,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UpdateChannelSubscription,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UpdateChannelSubscription(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetChannels(ctx context.Context, req GetChannelsRequest) (*GetChannelsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetChannels,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetChannels,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetChannels(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) JoinChannel(ctx context.Context, req JoinChannelRequest) (*JoinChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", JoinChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", JoinChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.JoinChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) LeaveChannel(ctx context.Context, req LeaveChannelRequest) (*LeaveChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", LeaveChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", LeaveChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.LeaveChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) MuteChannel(ctx context.Context, req MuteChannelRequest) (*MuteChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", MuteChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", MuteChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.MuteChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnmuteChannel(ctx context.Context, req UnmuteChannelRequest) (*UnmuteChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnmuteChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnmuteChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnmuteChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) MuteUser(ctx context.Context, req MuteUserRequest) (*MuteUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", MuteUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", MuteUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.MuteUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnmuteUser(ctx context.Context, req UnmuteUserRequest) (*UnmuteUserResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnmuteUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnmuteUser,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnmuteUser(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) MuteThread(ctx context.Context, req MuteThreadRequest) (*MuteThreadResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", MuteThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", MuteThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.MuteThread(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UnmuteThread(ctx context.Context, req UnmuteThreadRequest) (*UnmuteThreadResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UnmuteThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UnmuteThread,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UnmuteThread(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) CreateChannel(ctx context.Context, req CreateChannelRequest) (*CreateChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", CreateChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", CreateChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.CreateChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetPopularCards(ctx context.Context, req GetPopularCardsRequest) (*GetPopularCardsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetPopularCards,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetPopularCards,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetPopularCards(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetActionCosts(ctx context.Context, req GetActionCostsRequest) (*GetActionCostsResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetActionCosts,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetActionCosts,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetActionCosts(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) UseInviteCode(ctx context.Context, req UseInviteCodeRequest) (*UseInviteCodeResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", UseInviteCode,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", UseInviteCode,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.UseInviteCode(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) RequestValidation(ctx context.Context, req RequestValidationRequest) (*RequestValidationResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", RequestValidation,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", RequestValidation,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.RequestValidation(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ConfirmValidation(ctx context.Context, req ConfirmValidationRequest) (*ConfirmValidationResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ConfirmValidation,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ConfirmValidation,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ConfirmValidation(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) ValidateChannelName(ctx context.Context, req ValidateChannelNameRequest) (*ValidateChannelNameResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", ValidateChannelName,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", ValidateChannelName,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.ValidateChannelName(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetChannel(ctx context.Context, req GetChannelRequest) (*GetChannelResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetChannel,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetChannel(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) CanAffordAnonymousPost(ctx context.Context, req CanAffordAnonymousPostRequest) (*CanAffordAnonymousPostResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", CanAffordAnonymousPost,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", CanAffordAnonymousPost,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.CanAffordAnonymousPost(ctx, req)
	return response, err
}

func (lm *loggingMiddleware) GetLeaderboard(ctx context.Context, req GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
				"rpc", GetLeaderboard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
				"rpc", GetLeaderboard,
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.GetLeaderboard(ctx, req)
	return response, err
}
