// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/instrumentation.go.tmpl

package rpc

import (
	"context"
	"fmt"
	"time"

	"github.com/DataDog/datadog-go/statsd"
	"github.com/october93/engine/kit/log"
	"github.com/october93/engine/metrics"
	"github.com/october93/engine/metrics/dogstatsd"
)

type instrumentingMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.TimeHistogram
	errorCount     metrics.Counter
	l              log.Logger
	r              RPC
}

// NewInstrumentingMiddleware returns a new instance of instrumentingMiddleware.
func NewInstrumentingMiddleware(r RPC, client *statsd.Client, log log.Logger) RPC {
	requestCount := dogstatsd.NewCounter("request_count", 1, client, log)
	requestLatency := dogstatsd.NewTimeHistogram("request_latency", 1, client, log)
	errorCount := dogstatsd.NewCounter("error_count", 1, client, log)
	return &instrumentingMiddleware{
		requestCount:   requestCount,
		requestLatency: requestLatency,
		errorCount:     errorCount,
		l:              log,
		r:              r,
	}
}

func (im *instrumentingMiddleware) Auth(ctx context.Context, req AuthRequest) (*AuthResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: Auth}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.Auth(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ResetPassword(ctx context.Context, req ResetPasswordRequest) (*ResetPasswordResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ResetPassword}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ResetPassword(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) Logout(ctx context.Context, req LogoutRequest) (*LogoutResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: Logout}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.Logout(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) DeleteCard(ctx context.Context, req DeleteCardRequest) (*DeleteCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: DeleteCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.DeleteCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) FollowUser(ctx context.Context, req FollowUserRequest) (*FollowUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: FollowUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.FollowUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnfollowUser(ctx context.Context, req UnfollowUserRequest) (*UnfollowUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnfollowUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnfollowUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetFollowingUsers(ctx context.Context, req GetFollowingUsersRequest) (*GetFollowingUsersResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetFollowingUsers}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetFollowingUsers(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetPostsForUser(ctx context.Context, req GetPostsForUserRequest) (*GetPostsForUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetPostsForUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetPostsForUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetCards(ctx context.Context, req GetCardsRequest) (*GetCardsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetCards}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetCards(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetCard(ctx context.Context, req GetCardRequest) (*GetCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetThread(ctx context.Context, req GetThreadRequest) (*GetThreadResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetThread}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetThread(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ReactToCard(ctx context.Context, req ReactToCardRequest) (*ReactToCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ReactToCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ReactToCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) VoteOnCard(ctx context.Context, req VoteOnCardRequest) (*VoteOnCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: VoteOnCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.VoteOnCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) PostCard(ctx context.Context, req PostCardRequest) (*PostCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: PostCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.PostCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) NewInvite(ctx context.Context, req NewInviteRequest) (*NewInviteResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: NewInvite}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.NewInvite(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) RegisterDevice(ctx context.Context, req RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: RegisterDevice}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.RegisterDevice(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnregisterDevice(ctx context.Context, req UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnregisterDevice}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnregisterDevice(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UpdateSettings(ctx context.Context, req UpdateSettingsRequest) (*UpdateSettingsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UpdateSettings}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UpdateSettings(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) NewUser(ctx context.Context, req NewUserRequest) (*NewUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: NewUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.NewUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ValidateInviteCode(ctx context.Context, req ValidateInviteCodeRequest) (*ValidateInviteCodeResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ValidateInviteCode}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ValidateInviteCode(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) AddToWaitlist(ctx context.Context, req AddToWaitlistRequest) (*AddToWaitlistResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: AddToWaitlist}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.AddToWaitlist(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetUsers(ctx context.Context, req GetUsersRequest) (*GetUsersResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetUsers}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetUsers(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetUser(ctx context.Context, req GetUserRequest) (*GetUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ValidateUsername(ctx context.Context, req ValidateUsernameRequest) (*ValidateUsernameResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ValidateUsername}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ValidateUsername(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetNotifications(ctx context.Context, req GetNotificationsRequest) (*GetNotificationsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetNotifications}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetNotifications(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UpdateNotifications(ctx context.Context, req UpdateNotificationsRequest) (*UpdateNotificationsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UpdateNotifications}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UpdateNotifications(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetAnonymousHandle(ctx context.Context, req GetAnonymousHandleRequest) (*GetAnonymousHandleResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetAnonymousHandle}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetAnonymousHandle(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetTags(ctx context.Context, req GetTagsRequest) (*GetTagsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetTags}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetTags(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetFeaturesForUser(ctx context.Context, req GetFeaturesForUserRequest) (*GetFeaturesForUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetFeaturesForUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetFeaturesForUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) PreviewContent(ctx context.Context, req PreviewContentRequest) (*PreviewContentResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: PreviewContent}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.PreviewContent(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UploadImage(ctx context.Context, req UploadImageRequest) (*UploadImageResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UploadImage}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UploadImage(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ConnectUsers(ctx context.Context, req ConnectUsersRequest) (*ConnectUsersResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ConnectUsers}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ConnectUsers(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ModifyCardScore(ctx context.Context, req ModifyCardScoreRequest) (*ModifyCardScoreResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ModifyCardScore}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ModifyCardScore(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetInvites(ctx context.Context, req GetInvitesRequest) (*GetInvitesResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetInvites}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetInvites(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetOnboardingData(ctx context.Context, req GetOnboardingDataRequest) (*GetOnboardingDataResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetOnboardingData}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetOnboardingData(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetMyNetwork(ctx context.Context, req GetMyNetworkRequest) (*GetMyNetworkResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetMyNetwork}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetMyNetwork(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetTaggableUsers(ctx context.Context, req GetTaggableUsersRequest) (*GetTaggableUsersResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetTaggableUsers}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetTaggableUsers(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GroupInvites(ctx context.Context, req GroupInvitesRequest) (*GroupInvitesResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GroupInvites}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GroupInvites(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnsubscribeFromCard(ctx context.Context, req UnsubscribeFromCardRequest) (*UnsubscribeFromCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnsubscribeFromCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnsubscribeFromCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) SubscribeToCard(ctx context.Context, req SubscribeToCardRequest) (*SubscribeToCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: SubscribeToCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.SubscribeToCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ReportCard(ctx context.Context, req ReportCardRequest) (*ReportCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ReportCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ReportCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) SubmitFeedback(ctx context.Context, req SubmitFeedbackRequest) (*SubmitFeedbackResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: SubmitFeedback}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.SubmitFeedback(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) TipCard(ctx context.Context, req TipCardRequest) (*TipCardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: TipCard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.TipCard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) BlockUser(ctx context.Context, req BlockUserRequest) (*BlockUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: BlockUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.BlockUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetCardsForChannel(ctx context.Context, req GetCardsForChannelRequest) (*GetCardsForChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetCardsForChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetCardsForChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UpdateChannelSubscription(ctx context.Context, req UpdateChannelSubscriptionRequest) (*UpdateChannelSubscriptionResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UpdateChannelSubscription}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UpdateChannelSubscription(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetChannels(ctx context.Context, req GetChannelsRequest) (*GetChannelsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetChannels}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetChannels(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) JoinChannel(ctx context.Context, req JoinChannelRequest) (*JoinChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: JoinChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.JoinChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) LeaveChannel(ctx context.Context, req LeaveChannelRequest) (*LeaveChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: LeaveChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.LeaveChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) MuteChannel(ctx context.Context, req MuteChannelRequest) (*MuteChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: MuteChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.MuteChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnmuteChannel(ctx context.Context, req UnmuteChannelRequest) (*UnmuteChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnmuteChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnmuteChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) MuteUser(ctx context.Context, req MuteUserRequest) (*MuteUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: MuteUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.MuteUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnmuteUser(ctx context.Context, req UnmuteUserRequest) (*UnmuteUserResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnmuteUser}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnmuteUser(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) MuteThread(ctx context.Context, req MuteThreadRequest) (*MuteThreadResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: MuteThread}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.MuteThread(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UnmuteThread(ctx context.Context, req UnmuteThreadRequest) (*UnmuteThreadResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UnmuteThread}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UnmuteThread(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) CreateChannel(ctx context.Context, req CreateChannelRequest) (*CreateChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: CreateChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.CreateChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetPopularCards(ctx context.Context, req GetPopularCardsRequest) (*GetPopularCardsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetPopularCards}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetPopularCards(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetActionCosts(ctx context.Context, req GetActionCostsRequest) (*GetActionCostsResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetActionCosts}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetActionCosts(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) UseInviteCode(ctx context.Context, req UseInviteCodeRequest) (*UseInviteCodeResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: UseInviteCode}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.UseInviteCode(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) RequestValidation(ctx context.Context, req RequestValidationRequest) (*RequestValidationResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: RequestValidation}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.RequestValidation(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ConfirmValidation(ctx context.Context, req ConfirmValidationRequest) (*ConfirmValidationResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ConfirmValidation}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ConfirmValidation(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) ValidateChannelName(ctx context.Context, req ValidateChannelNameRequest) (*ValidateChannelNameResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: ValidateChannelName}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.ValidateChannelName(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetChannel(ctx context.Context, req GetChannelRequest) (*GetChannelResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetChannel}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetChannel(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) CanAffordAnonymousPost(ctx context.Context, req CanAffordAnonymousPostRequest) (*CanAffordAnonymousPostResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: CanAffordAnonymousPost}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.CanAffordAnonymousPost(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) GetLeaderboard(ctx context.Context, req GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: GetLeaderboard}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.GetLeaderboard(ctx, req)
	return response, err
}

func (im *instrumentingMiddleware) extractUsername(ctx context.Context) string {
	value := ctx.Value("username")
	if value == nil {
		return "No User"
	}
	username, ok := value.(string)
	if !ok {
		im.l.Error(fmt.Errorf("invalid username type in context: %T", ctx.Value("username")))
		return ""
	}
	return username
}
