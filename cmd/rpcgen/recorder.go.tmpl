// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/recorder.go.tmpl

package rpc

type recordingMiddleware struct {
	RPC
	recorder *activityrecorder.ActivityRecorder
	log      log.Logger
}

func NewRecordingMiddleware(r RPC, recorder *activityrecorder.ActivityRecorder, log log.Logger) RPC {
	return &recordingMiddleware{
		RPC:      r,
		recorder: recorder,
		log:      log,
	}
}

{{range .Endpoints}}
func (rm *recordingMiddleware) {{.Name}}(ctx context.Context, req {{.Name}}Request) (*{{.Name}}Response, error) {
	var err error
	defer func() {
		var params = req.Params
		err = rm.enqueueJob({{.Name}}, params.Sanitize(), req.Session.UserID, err)
		if err != nil {
			rm.log.Error(err)
		}
	}()
	result, err := rm.RPC.{{.Name}}(ctx, req)
	return result, err
}
{{end}}

func (rm *recordingMiddleware) enqueueJob(rpc string, data interface{}, userID globalid.ID, err error) error {
	activity := &model.Activity{
		RPC: rpc,
	}
	if userID != globalid.Nil {
		activity.UserID = userID
	}
	if err != nil {
		activity.Error = err.Error()
	}
	activity.Data, err = json.Marshal(data)
	if err != nil {
		return err
	}
	return rm.recorder.EnqueueJob(activity)
}
