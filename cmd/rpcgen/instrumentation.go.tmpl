// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/instrumentation.go.tmpl

package rpc

type instrumentingMiddleware struct {
	requestCount   metrics.Counter
	requestLatency metrics.TimeHistogram
	errorCount     metrics.Counter
	l              log.Logger
	r              RPC
}

// NewInstrumentingMiddleware returns a new instance of instrumentingMiddleware.
func NewInstrumentingMiddleware(r RPC, client *statsd.Client, log log.Logger) RPC {
	requestCount := dogstatsd.NewCounter("request_count", 1, client, log)
	requestLatency := dogstatsd.NewTimeHistogram("request_latency", 1, client, log)
	errorCount := dogstatsd.NewCounter("error_count", 1, client, log)
	return &instrumentingMiddleware{
		requestCount:   requestCount,
		requestLatency: requestLatency,
		errorCount:     errorCount,
		l:              log,
		r:              r,
	}
}

{{range .Endpoints}}
func (im *instrumentingMiddleware) {{.Name}}(ctx context.Context, req {{.Name}}Request) (*{{.Name}}Response, error) {
	var err error
	methodTag := metrics.Tag{Key: "method", Value: {{.Name}}}
	usernameTag := metrics.Tag{Key: "username", Value: im.extractUsername(ctx)}
	defer func(begin time.Time) {
		if err != nil {
			errorTag := metrics.Tag{Key: "error", Value: err.Error()}
			im.errorCount.With(methodTag).With(errorTag).Add(1)
		}
		im.requestCount.With(methodTag).With(usernameTag).Add(1)
		im.requestLatency.With(methodTag).With(usernameTag).Observe(time.Since(begin))
	}(time.Now())
	response, err := im.r.{{.Name}}(ctx, req)
	return response, err
}
{{end}}

func (im *instrumentingMiddleware) extractUsername(ctx context.Context) string {
	value := ctx.Value("username")
	if value == nil {
		return "No User"
	}
	username, ok := value.(string)
	if !ok {
		im.l.Error(fmt.Errorf("invalid username type in context: %T", ctx.Value("username")))
		return ""
	}
	return username
}
