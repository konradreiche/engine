// Code generated by rpcgen; DO NOT EDIT.
//
// Source: rpc/rpc.go
// Template: cmd/rpcgen/logging.go.tmpl

package rpc

import (
	rpccontext "github.com/october93/engine/rpc/context"
)

type loggingMiddleware struct {
	log log.Logger
	r   RPC
}

func NewLoggingMiddleware(r RPC, log log.Logger) RPC {
	return &loggingMiddleware{
		log: log,
		r:   r,
	}
}

{{range .Endpoints}}
func (lm *loggingMiddleware) {{.Name}}(ctx context.Context, req {{.Name}}Request) (*{{.Name}}Response, error) {
	var err error
	defer func() {
		username := extractUsername(ctx)
		if err == nil {
			lm.log.Info("request",
			  "rpc", {{.Name}},
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
			)
		} else {
			lm.log.Error(errors.New("request failed"),
			  "rpc", {{.Name}},
				"session_id", req.Session.ID,
				"request_id", ctx.Value(rpccontext.RequestID),
				"username", username,
				"user_agent", ctx.Value(rpccontext.UserAgent),
				"ip_address", ctx.Value(rpccontext.IPAddress),
				"params", req.Params.Sanitize(),
				"err", err,
			)
		}
	}()
	response, err := lm.r.{{.Name}}(ctx, req)
	return response, err
}
{{end}}
